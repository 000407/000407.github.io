<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://kanchana.senadheera.net/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kanchana.senadheera.net/" rel="alternate" type="text/html" /><updated>2025-06-05T21:35:52+00:00</updated><id>https://kanchana.senadheera.net/feed.xml</id><title type="html">~my territory~</title><subtitle>This is the personal web space I keep for myself.  You can find things like technical bits, my thoughts on different topics and issues, and knowledge I find from here and there.</subtitle><entry><title type="html">බැල්කනියද? මහපාරද?</title><link href="https://kanchana.senadheera.net/mage_weyikkiya/2021/06/02/buddha-statue-on-balcony.html" rel="alternate" type="text/html" title="බැල්කනියද? මහපාරද?" /><published>2021-06-02T19:30:00+00:00</published><updated>2021-06-02T19:30:00+00:00</updated><id>https://kanchana.senadheera.net/mage_weyikkiya/2021/06/02/buddha-statue-on-balcony</id><content type="html" xml:base="https://kanchana.senadheera.net/mage_weyikkiya/2021/06/02/buddha-statue-on-balcony.html"><![CDATA[<p>(2021 මාර්තු 14 දාතම දරණ ලංකාදීප පුවත්පතේ තක්සලාවේ “බැල්කනියට වැරැන්ඩාවට බුදුරජාණන් වහන්සේ විසිකළ අඳබාල බෞද්ධයෝ” යන මැයෙන් පළවූ ලිපිය අනුසාරයෙනි.)</p>

<p><img src="/assets/img/posts/buddha-statue-on-balcony/title.jpg#center" alt="Buddha Statue on Outdoors in Colombo (Image: https://www.istockphoto.com/photo/buddha-statues-in-seema-malaka-temple-colombo-sri-lanka-gm836128528-135973237)" /></p>

<p>“<strong>මේ ගෞතම බුද්ධ රාජ්‍යයයි</strong>” යන්න, අපට නිතර දෙවේලේ දක්නට ලැබෙන, ඉතාම ප්‍රකට ත්‍රීවීල්, ටැක්සි, ප්‍රයිවෙට් බස් වාක්‍යයකි. සමහරක් දේසපාලුවන්ට අනුව එය එසේ නොවේ. එහි සත්‍යාසත්‍යතාව කවරාකාර හෝ වේවා, ථෙරවාද බුදු දහම බොහෝ හොඳින් මුල්බැසගෙන දළු ලා වැඩෙන්නටත් ඒ හරහා මේ පුණ්‍ය භූමියේ මතු නොව සකල ලෝකවාසී ජනී ජනයාගේ යහපත වෙනුවෙන් ථෙරවාද බුදු දහම වසර දෙදහස් පන්සියයකටත් ඔබ්බෙන් පවතින්නටත් කාරණා යෙදුනු බව අවිවාදාත්මකය. සාරාසංඛ්‍ය කල්ප ලක්ෂයක් පෙරුම් පුරා, අනේකවිධ කම්කටොළු උහුලාගනිමින්, තමන් වහන්සේ විසින්ම ලෝකයේ යථා ස්වභාවය අවබෝධ කරගෙන සකල ලෝකවාසී සත්වයා කෙරේ අපරිමිත දයානුකම්පාවෙන් දේශනා කොට වදාළූ සිද්ධාර්ථ ගෞතමයන් ඇතුළු සියලු බුදුවරයන් කෙරේත්, උන්වහන්සේලාගේ පරිනිර්වාණයෙන් අනතුරුව වසර දෙදහස් පන්සියයකට ඔබ්බෙන් ඒ ධර්මය රැකගෙන අප වෙත දායාද කල සංඝයා වහන්සේලා කෙරේත් මාගේ සිතෙහි ඇත්තේ අපරිමිත කෘතඥතාව මූලික වූ ගෞරවයකි. මේ අයුරින් වචන අමුණන්නට මා හට ඇති එකම හේතුව එකී කෘතඥතාවයයි. ඒ කෘතඥතාව හැරුණු කොට බුදුන් වහන්සේලා හෝ සඟුන් වහන්සේලා ගැන වෙනත් කිසිදු අදාලත්වයක් මා හට නැති බව මෙහිලා ඉඳුරාම සඳහන් කල යුතුය. ඔවුන් වහන්සේලාද අවසන අප වැනිම මනුෂ්‍යයන් පමණි. බෞද්ධයෙකු වශයෙන් මා හට අදාල වන, සහ අදාල විය යුතු එකම දෙය සියලු බුදුවරයන් වහන්සේලා විසින් දේශනා කරන්නට යෙදුනු ධර්මය පමණක් යැයි මම කල්පනා කරමි.</p>

<p>සිංහල බෞද්ධයන් බහුතරයකගේ දේශපාලන, සංස්කෘතික හා සමාජ භාවිතාව “අඳබාල” එකකැයි මා කල්පනා කරන්නේ අද ඊයේ සිට නොවේ. නමුත් ඒ අඳබාල කමට හේතුව, උක්ත දාතම දරණ “බැල්කනියට වැරැන්ඩාවට බුදුරජාණන් වහන්සේ විසිකළ අඳබාල බෞද්ධයෝ” යන ශීර්ෂයෙන් යුත් ලිපියේ කතෘ ස්වාමීන් වහන්සේ සඳහන් කරන අන්දමට “සිය නිවසේ බුදු පිළිමය බැල්කනියට වැරැන්ඩාවට දැමීම” නොවේ. උක්ත දාතම දරණ ලිපියෙන් උන්වහන්සේ බෞද්ධයන් වෙත එල්ල කරන චෝදනා පත්‍රය පිලිබඳ තවදුරටත් සලකා බැලීම මෙම ලිපියේ අරමුණයි. ඒ හැර, මේ ලිපියේ මා සඳහන් කරන කාරණා වලින් තමන්ට අභිමත කොටස් තෝරාගෙන මාගේ සිංහලකම හෝ බෞද්ධකම ගැන ප්‍රශ්න කරන්නට උත්සුක වීම කාලය කා දැමීමක් පමණක් බැව් යෝජනා කරනු කැමැත්තෙමි. එපමණක් නොව, මට හැඟෙන දැනෙන හැටියට ඉහත ලිපියේ අඩංගු කාරණා හරහා “ආගම හා ධර්මය අතර පටළැවිල්ලක්” විද්‍යාමාන වේ. මේ උත්සාහය ඒ ගැන මට දැනෙන හැටියට පැහැදිලි කරගන්නටය.</p>

<p>ශාසන ඉතිහාසය ගැන මාගේ දැනුමේ හැටියට බුද්ධ ප්‍රතිමා පිළිබඳ ඉතිහාසය බුද්ධ කාලය දක්වාම දිවයයි. කෝසල බිම්බ වර්ණනාවේ සඳහන් වන පරිදී, පසේනදී කෝසල රජුගේ ඉල්ලීමකට අනුව ගෞතම බුදුරජාණන් වහන්සේ වෙතින් ලද අවසරය පරිදී, රජු විසින් සඳුන් හරයකින් කරවූ පිළිම වහන්සේගෙන් ඇරඹුණු බුද්ධ ප්‍රතිමා පිළිබඳ සංස්කෘතිය ක්‍රමයෙන් විකාශනය වී අද වන විට විහාරස්ථානවල මතු නොව “බැල්කනි” වල සහ “මහපාරවල් ගණනේ, හන්දියක් ගණනේ” අප දකින බුදු පිළිමය දක්වා පැමිණ ඇත. මේ කුමන ආකාර කතා කීවත් බුදු පිළිම නිර්මාණයේ අරමුණ පිළිබඳ තර්ක දෙකක් නැති බැව් පැහැදිලිය. එම අරමුණ නම්, අප අතරින් වෙන්ව අජර අමර නිර්වාණාප්‍රාප්ත වූ, ගුණ නැණ බෙලෙන් අග තැන් පත් ඒ සොඳුරු මනුෂ්‍යයාණන් වහන්සේගේ ජීවමාන ආදර්ශනයක් ලෙස භාවිතා කිරීම සඳහා යන්නය. මට හිතෙන හැටියට නම් සැබෑ බෞද්ධයෙකුට කිසිදු අවස්ථාවක “බුද්ධ පූජාව පිලිගැනීමට බුදුන් වහන්සේ ජීවමානව වැඩ වෙසෙනවාද?” යන ප්‍රශ්නය ඇති නොවිය යුතුය. සරලවම ගත් කල එය වැඩකට නැති ප්‍රශ්නයකි. අනෙකුත් සියළු සත්ත්වයන්ගේ මෙන්, සතර මහා භූත රූපයෙන් සැදුම්ලත් බුද්ධ කායත් සනාතන ධර්මතාවක් වන අනිත්‍යය පසක් කරමින්, ලෝකයට විසිරී ගොස් අවසන් බව අවිවාදාත්මකය. ඒ පිළිබඳව කෙරෙන සියලු ආකාරයේ සාකච්ඡා, තර්ක විතර්ක, වාද විවාද ආදිය පදනම් විරහිත “සම්ඵප්‍රලාප” විනා වෙන අන් යමක් නොවන බව මම කල්පනා කරමි. නමුත් මා ඉහත කී ලිපිය ආරම්භ වන්නේ ඒ කාරණාව පිළිබඳ දීර්ඝ වශයෙන් කරුණු පැහදිලි කරමිනි.</p>

<p>එපමණක් නොව, බුදුරජාණන් වහන්සේ විසින් කරන ලද බුද්ධ අධිෂ්ඨානයන් ඒ අයුරින්ම ක්‍රියාත්මක වන බව බෞද්ධයන් විසින් අවබෝධ කරගත යුතු යැයි උක්ත ලිපියෙහි මුලින්ම සඳහන් වේ. එය තව දුරටත් විග්‍රහ කරමින් එහි කියැවෙන්නේ අප සියලු දෙනා පිළිබඳව බුදු ඇසින් දැකීමෙන් කරන ලද ප්‍රාර්ථනා ඇති බවය. නමුත් ඒ ප්‍රාර්ථනාවන් කවරේද, එකී ප්‍රාර්ථනා ඉෂ්ට සිද්ධ වීමෙන් අපට ලැබෙනුයේ මොනවාද යන ප්‍රශ්න කිසිවකට පිළිතුරු එහි සඳහන් වන්නෙ නැත. සමහර විට ඒවා ගැන එම ලිපිය තුල සාකච්ඡා කිරීම මාතෘකාවෙන් බැහැර වීමක් යැයි සිතා, ඒවා ගැන එම ලිපිය තුල සාකච්ඡා නොවූවා වන්නටද පිළිවන. මේ කොයි හැටි වෙතත් මෙහි ඇති ලොකුම අවුල මේවා “ධාර්මික කාරණා”, නොහොත් “ධර්මයට අයත් හෝ ඒ පිළිබඳ කාරණා” ලෙස ලඝු කිරීමට ඉහත ලිපියෙහි උත්සුක වී තිබීමය. මෙය කියවන බෞද්ධ අබෞද්ධ සියලු දෙනාට ඉතා පැහැදිලිව කිවයුතු වන්නේ මේවා කිසිවක් “ආගම පිළිබඳ කාරණා” විනා “ධර්මය පිළිබඳ කාරණා” නොවන බවය. මාගේ දහම් දැනුමට අනුව නම් අභිධර්මයේ කිසිදු තැනක “නිවැරදිව බුද්ධ පූජාවක් කරන්නේ කෙසේදැයි” කියා ඉගැන්වෙන්නේ නැත. චතුරාර්ය සත්‍යය, පටිච්චසමුප්පාදය, කුසලාකුසල කර්ම, නීවරණ ධර්ම, සංයෝජන ධර්ම, ත්‍රිලක්ෂණය වැනි ලෝකයේ හා විශ්වයේ යථා ස්වභාවය පැහැදිලි කෙරෙන ධර්ම කාරණා අතර “නිවැරදිව බුද්ධ පූජාවක් කරන්නේ කෙසේද?” යන මාතෘකාව ගැන සඳහන් කිරීම පවා එකකට එකක් නොගැලපෙන බව බුද්ධ ධර්මය ගැන සාමාන්‍ය කියවීමක් ඇති අයෙකුට වුවද වැටහෙනු ඇති බව මම කල්පනා කරමි.</p>

<p>ඔබ මීගමුව කොළඹ (A3) මහා මාර්ගයේ ගමන්කොට ඇත්නම්, ඒ මාර්ගයට සම්බන්ධ වන මංසන්ධියක් ගණනේ සවිකොට ඇති “සුරුවම්” දැක ඇතැයි මම සිතමි. එක් එක් කතෝලික, ක්‍රිස්තියානි පල්ලීන්ට අදාල කිසියම් මුනිවරයෙක්, ශාන්තුවරයෙක් ආදී කෙනෙකු සිහිකෙරෙනු වස් තනන්නට යෙදුනු මෙකී “සුරුවම්” මීගමු පාරේ පමණක් ඉතා විශාල සංඛ්‍යාවක් ඇතිවාට සැක නැත. මේවායේ යටි අරමුණ වෙන අන් කවරක්වත් නොව ක්‍රිස්තියානි, කතෝලික ආගම්වල භූමිය මත ව්‍යාප්තිය සනිටුහන් කිරීමය. මේ කියන්නේ එය ගැටළුවක් කියා නොවේ. නාමිකව හෝ නිදහස්, ප්‍රජාතන්ත්‍රවාදී රටක් වන ශ්‍රී ලංකාද්වීපයේ ආගමික නිදහස සනිටුහන් කරන්නට ඊට වඩා හොඳ ක්‍රමයක් ගැන කල්පනා කිරීමත් අපහසුය. නමුත් භූමියේ ආගමික ව්‍යාප්තියේ නාමයෙන් දෙවියන් වහන්සේ පාරට ඇද දැමීම මාගේ ආකල්පයේ හැටියට නම් විකාර වැඩකි.</p>

<p>අවාසනාවක මහත නම් බුද්ධියට ආමන්ත්‍රණය කෙරෙන ධර්මයක අනුසාරයෙන් සිය ජීවිතය හැඩගස්වා ගන්නේ යැයි කියන බෞද්ධයාත්, කිතුණුවන් හා තරගයට බුදුරජාණන් වහන්සේ පාරට ඇද දැමීමය. අද සාමාන්‍ය පෙල අසමත් වන තරුණයෙකු මුලින්ම කරන්නේ කීයක් හෝ උපයා ගන්නට ගෙවල් ලඟ හන්දියට ත්‍රිරෝද රථයක් දැමීමය. ටික දිනකින් මෙහි එකතුවන ත්‍රිරෝද රථ ධාවකයෝ කිහිපදෙනා කාගේ කාගේ හෝ මුදල් එකතුකොට “හන්දියේ වීල් පාක් එකේ” බුදු පිළිම ගෙයක් කරවති. මෙහි මල් පහන් සුවඳ දුම් පූජා කරන ඔවුහු හවසට “සෙට් වී අඩිය ගසන්නේද” බුදු ගෙය අසලමය. අර බුදු පිළිම වහන්සේ අව් වැසි දූවිලි උවදුරු උහුලමින් මහපාර දෙස අනුකම්පාවෙන් බලා වැඩ හිඳිති. බුදු පිළිම වහන්සේලා මහ මං අයිනේ විදින කටු කොහොල් ගැන අපේ ස්වාමීන් වහන්සේලා බහුතරයකට වගේ වගක් නැත. බුදු පිළිමයට මල් පහන් පිදීමෙන් ඔබට බුද්ධාගමිකයෙකු විය හැක. නමුත් බුද්ධ දේශනානුකූලව තම දිවි පෙවෙත ගොඩ නගා ගන්නට උත්සාහ දැරීම ආරම්භ කරන තුරු ඔබට බෞද්ධයෙකු විය නොහැක. අගනුවරට ආසන්නයේ පර්චස් හයක අමාරුවෙන් ගෙයක් හදාගත් බෞද්ධයෙකු සිය බුදු කුටිය බැල්කනියේ තැනීම ගැන හෝ එලෙස සෑදූ බුදු කුටියේ දිග පළල උස ගැන විස්සෝප වනවා වෙනුවට, “හරියට බුද්ධ පූජාව කරපං, හරියට හාමුදුරුවන්ට දානෙ ටික දීපං” ආදිය කියමින් බෞද්ධයාව “ආගමානුකූල” දිවියකට තල්ලු කරනවා වෙනුවට අරි අටඟි මගට ප්‍රවිෂ්ඨ වී “ධර්මානුකූල” දිවි පෙවෙතකට බෞද්ධයා හැඩගස්වන්නට ස්වාමීන් වහන්සේලා උත්සුක නොවීම කණගාටුවට කරුණකි. එපමණක් නොව “සුපටිපන්න” යැයි තමුන්ව හඳුන්වා ගනිමින්, පන්සල්වලට වී අධික කාමභෝගී ජීවිත ගත කරමින් පෘථග්ජන අපට “අඳබාල බෞද්ධයන්” යැයි කීම “වීදුරු ගෙවල් තුල හිඳ පිටතට ගල් ගැසීමක්” හා සමාන බව උන්වහන්සේලාට නොවැටහීම සිංහල ජාතියේ අවාසනාවකි.</p>

<p>අනික් අවුල “බුද්ධ පූජාව තබන පාත්‍රයේ ප්‍රමාණය” පිළිබඳව සාකච්ඡාවය. බෞද්ධයෙක් වශයෙන් මේවා ගැන ලියා තබන්නට සිදුවීමම එක්තරා අන්දමක විහිළුවකැයි මට සිතේ. “සුජීවත්ව වැඩ වෙසෙන බුදු කෙනෙකුගේ කුස පිරෙන තරමේ ආහාර ප්‍රමාණයක්” පිළිමයකට පූජාකොට, එය කූඹින් කැරපොත්තන් වසා පිළුණු වූ පසු කුණු බක්කියට විසි කරනවා වෙනුවට, කුසගින්නෙන් පෙලෙන පුද්ගලයෙකුගේ සුදහ ගින්දර නිවන්නට එම ආහාර වේල යොදා ගැනීම වඩා ප්‍රායෝගික හා ප්‍රයෝජනවත් යැයි මම කල්පනා කරමි. මේ කියන්නේ ඔබ බුද්ධ පූජාව නොකල යුතු යැයි කියා හෝ බුද්ධ පූජාව වෙනුවෙන් ඉවතලන, වැඩකට නැති ආහාර පූජා කල යුතු යැයි කියා නොවේ. ඔබ බුද්ධ පූජාව කල යුතුය. බුද්ධ පූජාව වශයෙන් ඉවතලන ආහාර පූජා නොකල යුතුය. නිවසේ ඇති දැඩි කෙරෙන සුරතල් බල්ලාටවත් නොදෙන ඉවතලන ආහාර බුදුන්ට පූජා කරනවාට වඩා බුද්ධ පූජාව නොකිරීම යහපති. නමුත් ඔබ බුද්ධ පූජාව පිළියෙල කරන විට, එය අනිවාර්යයෙන්ම කැරපොත්තන්ගේ කූඹින්ගේ ආහාර වන බවත්, පිළුණු වූ පසු කුණු බක්කියෙන් කෙළවර වන බව සිහිතබා ගත යුතුය. ඔබ පූජාකරන බුද්ධ පූජාවේ ගුණාත්මක බව ඉහලින්ම පවත්වා ගන්නටත්, ප්‍රමාණය පිළිබඳව සාධාරණව කල්පනා කිරීමටත් ඔබ වගබලා ගත යුතු බව මාගේ අදහසයි.</p>

<p>අපෙන් බණට ආරාධනා ලබන බහුතරයක් ස්වාමීන් වහන්සේලා බණට වැඩමකොට අප පූජා කරන ගිලන්පස වලඳා ඉන් අනතුරුව අපටම “අඳබාල බෞද්ධයන්” යැයි පරිභව කරති. ගෑණුන්ගේ කොට ගවුම, හිර කලිසම, ස්ට්‍රේට් කර කලර් කරන ලද කොණ්ඩය ගැන දෙස් දෙවොල් තබති. රියැලිටි සංස්කෘතියට “ඇට්ටි හැලෙන්නට” පහර දෙති. එක්කෝ තමුන්ගේ අප්‍රියතම දේසපාලුවාගෙ පළු අරිති. එසේ නැතිනම් තම ප්‍රියතම දේසපාලුවා ගැන ප්‍රශස්ති ගයති. මේ ආදී දෙලොවටම වැඩක් නැති සමාජ විවේචන වලට පැයක් දෙකක් නාස්තිකොට අප පූජා කරන පිරිකරද රැගෙන නැවත පන්සලට වඩිති. ඒ හැර බුදුන් වහන්සේ අපවෙත දේශනා කොට වදාල, ලෝකයේ යථා ස්වභාවය, සත්වයාගෙ උපත හා විපත, කර්ම විපාක ආදී සංකල්ප අපවෙත පහදා දී අපගේ පෘථග්ජන ජීවිත ඒවාට අනුකූල කරගන්නේ කෙසේද, ඒ හරහා වඩා ධර්මානුකූල ජීවිතයක් ගත කිරීමටත්, එය මෙලොව පරලොව යහපත වෙනුවෙන්, සසර ගමනේ කෙළවර වෙනුවෙන් යොදවා ගන්නේ කෙසේද යන්න ගැනත් උන්වහන්සේලා අපට පහදා දෙන්නේ ඉතාමත්ම කලාතුරකිනි. බුදුන් වහන්සේ සෝපාකට දහම් දෙසන්නට පළමු, සෝපාකව ගැට ගසා තිබූ මළ සිරුරෙන් ලෙහා අමු සොහොනෙන් මුදවා ගත් සේක. සුනීතට දහම් දෙසන්නට පළමු සුනීතව නරාවලෙන් ගොඩට ගත් සේක. පටාචාරාවට දහම් දෙසන්නට පළමු, පටාචාරාවගේ විලි වැසූ සේක. අපේ ස්වාමීන් වහන්සේලාට අප කෙරේ එතරම් අනුකම්පාවක් පහල නොවීම බෞද්ධ අපගේ පව්කාර කම විනා අන් කවරක්වත් නොවේ. බෞද්ධයන්ට එදිරි අන්‍යාගමීකරණය මේ තරම් පහසු වන්නට ප්‍රධානම හේතුව බෞද්ධ භික්ෂු නායකත්වයේ මේ අනුකම්පා විරහිත ආකල්පයන් බව මෙහි සඳහන් කරනුයේ හද පිරි කණගාටුවෙනි.</p>

<p>කම් නැත. බුදුන් වහන්සේ විසින්ම දෙසා වදාල පරිද්දෙන් “අත්තාහි අත්තනො නාථො” නොහොත් “තමාට පිහිට තමා පමණක්ම” වේ. ඔබ රැස්කරන කුසල් වලින්, ඔබට අපායේ නොවැටී නිර්වාණාවබෝධය කරනු පිණිස මග තැනෙනු ඇත. ඔබේ වීර්යය වඩා, බුද්ධිය වෙහෙසවා ඒ ගමන යා යුතු වන්නේ ඔබ විසින්ම බව තරයේ සිහි තබා ගත යුතු බැව් මම කල්පනා කරමි. බුදුන් වහන්සේ විසින්ම වරෙක දේශනා කල පරිදී ධර්මය යනු පහුරකි. ඒ පහුර කර තබාගෙන මෙගොඩ ඉවුරේ ජෝගි නටනවා වෙනුවට, සසර නමැති බියකරු සැඩ පහරින් එතෙර වන්නට ඒ පහුර යොදා ගත යුතුය. අපේ අවාසනාවට දැන් දැන් ධර්මය යනු පහුරකට වඩා, ලිහී පැටලී ගිය වරපට වලින් අවුල් ජාලාවක් බවට පත් වූ දඬු ගොඩක් පමණක් බැව් මාගේ වැටහීමය. සසර නමැති බියකරු සැඩපහරැති දියේ හෙලා පදින්නට පෙරාතුව, ඒ අවුල ලිහා පහුර නිසිලෙස බැඳ ගැනීම අප අභිමුව ඇති මුල්ම අභියෝගාත්මක කාර්යය බව නම් පැහැදිලිය.</p>]]></content><author><name></name></author><category term="mage_weyikkiya" /><summary type="html"><![CDATA["මේ ගෞතම බුද්ධ රාජ්‍යයයි" යන්න, අපට නිතර දෙවේලේ දක්නට ලැබෙන, ඉතාම ප්‍රකට ත්‍රීවීල්, ටැක්සි, ප්‍රයිවෙට් බස් වාක්‍යයකි. සමහරක් දේසපාලුවන්ට අනුව එය එසේ නොවේ. එහි සත්‍යාසත්‍යතාව කවරාකාර හෝ වේවා, ථෙරවාද බුදු දහම බොහෝ හොඳින් මුල්බැසගෙන දළු ලා වැඩෙන්නටත් ඒ හරහා මේ පුණ්‍ය භූමියේ මතු නොව සකල ලෝකවාසී ජනී ජනයාගේ යහපත වෙනුවෙන් ථෙරවාද බුදු දහම වසර දෙදහස් පන්සියයකටත් ඔබ්බෙන් පවතින්නටත් කාරණා යෙදුනු බව අවිවාදාත්මකය...]]></summary></entry><entry><title type="html">Server-Sent Events in Action</title><link href="https://kanchana.senadheera.net/techbits/2021/02/11/spring-boot-server-sent-events.html" rel="alternate" type="text/html" title="Server-Sent Events in Action" /><published>2021-02-11T00:00:00+00:00</published><updated>2021-02-11T00:00:00+00:00</updated><id>https://kanchana.senadheera.net/techbits/2021/02/11/spring-boot-server-sent-events</id><content type="html" xml:base="https://kanchana.senadheera.net/techbits/2021/02/11/spring-boot-server-sent-events.html"><![CDATA[<p>In client-server architecture, the modes of interaction between the client and the server are primarily two-fold. They are namely Push and Pull. Generally, the server is understood to be passive, where the interaction is initiated from the side of the client, making the client the active party. Whenever the client wants, the client will poke the server saying <em>hey, are you up?</em> and the server will keep an ear on the line listening to such <em>hey!</em> messages. This is known as <strong><em>pull-messaging</em></strong>. But this is not the case, when the server wants to notify the client when there is a specific <strong><em>event</em></strong> occurred on the side of the server. These events are <strong><em>sent</em></strong>, or <strong><em>pushed</em></strong> to the client as they occur. This is the reason why we employ <strong><em>Server-Sent Events</em></strong> in the first place.</p>

<p>According to <a href="https://en.wikipedia.org/wiki/Server-sent_events">Wikipedia’s page</a>,</p>

<blockquote>
  <p>Server-Sent Events is a standard describing how servers can initiate data transmission towards clients once an initial client connection has been established. They are commonly used to send message updates or continuous data streams to a browser client and designed to enhance native, cross-browser streaming through a JavaScript API called EventSource, through which a client requests a particular URL in order to receive an event stream.</p>
</blockquote>

<p><img src="/assets/img/posts/spring_sse/standard_client_server.png#center" alt="Standard Client-Server Interaction" /></p>

<p>The above diagram depicts the difference between the two. In fact in server-sent events, the initial connection is again requested by the client. This could be achieved for instance using <a href="https://developer.mozilla.org/en-US/docs/Web/API/EventSource">EventSource</a> in JavaScript. Server-sent events differ from <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API">Web Sockets</a> as Server-Sent Events are <strong><em>uni-directional</em></strong> while Web Sockets are <strong><em>bi-directional</em></strong>. That means Server-Sent Events, as the name implies are on the direction of <code class="language-plaintext highlighter-rouge">Server -&gt; Client</code> but not the other way around.</p>

<h2 id="server-sent-events-with-spring">Server-Sent Events with Spring</h2>

<p>The famous <a href="https://spring.io/projects/spring-framework">Spring Framework</a> provides support for reactive-stack web applications to run on non-blocking servers such as Netty and Undertow, with <a href="https://docs.spring.io/spring-framework/docs/current/reference/html/web-reactive.html">Spring Webflux</a>. This is a popular library among developers for its streaming capability and so forth. We will be using Webflux to create a streaming API. Let’s get started.</p>

<p>This demo mainly comprises of two services which are integrated with streams over HTTP.</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">EventEmitter</code> - This is the origin of events. This will also have a standard HTTP endpoing which is not streaming data.</li>
  <li><code class="language-plaintext highlighter-rouge">EventConsumerProxy</code> - This is the service that is acting as a proxy. This consumes both the streaming and non-streaming endpoints from the <code class="language-plaintext highlighter-rouge">EventEmitter</code> and provides two streaming endpoints, one for each.</li>
</ol>

<p>In the <code class="language-plaintext highlighter-rouge">EventEmitter</code>, there is a controller <a href="https://github.com/000407/sse_demo/blob/master/src/sse_emitter/java/sse_emitter/controller/EventEmitterController.java"><code class="language-plaintext highlighter-rouge">EventEmitterController</code></a>, that has a method <code class="language-plaintext highlighter-rouge">Flux&lt;ServerSentEvent&lt;String&gt;&gt; streamEvents()</code> which appears as follows. Let’s break down what the statements of this method means.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">"/stream"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Flux</span><span class="o">&lt;</span><span class="nc">ServerSentEvent</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="nf">streamEvents</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Received request to stream events"</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">Flux</span><span class="o">.</span><span class="na">interval</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">2</span><span class="o">))</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">sequence</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="k">try</span> <span class="o">{</span>
                        <span class="nc">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="nc">ThreadLocalRandom</span><span class="o">.</span><span class="na">current</span><span class="o">().</span><span class="na">nextLong</span><span class="o">(</span><span class="mi">100</span><span class="o">,</span> <span class="mi">1000</span><span class="o">));</span>
                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">InterruptedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="k">return</span> <span class="nc">ServerSentEvent</span><span class="o">.&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">builder</span><span class="o">()</span>
                            <span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">sequence</span><span class="o">))</span>
                            <span class="o">.</span><span class="na">event</span><span class="o">(</span><span class="s">"periodic-event"</span><span class="o">)</span>
                            <span class="o">.</span><span class="na">data</span><span class="o">(</span><span class="s">"SSE - "</span> <span class="o">+</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">toString</span><span class="o">())</span>
                            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
                <span class="o">});</span>
    <span class="o">}</span>
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@GetMapping(...)</code> - typical Spring controller endpoint URL mapping</li>
  <li>Return type <code class="language-plaintext highlighter-rouge">Flux&lt;ServerSentEvent&lt;String&gt;&gt;</code> - This return is important, as it specifies the response of this endpoint would be a reactive stream of data with the content type <code class="language-plaintext highlighter-rouge">text/event-stream</code></li>
  <li>Construction of the <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/http/codec/ServerSentEvent.html"><code class="language-plaintext highlighter-rouge">ServerSentEvent</code></a> - The SSE object is created using the builder specified in the said class.</li>
</ul>

<p>In addition, there is a <code class="language-plaintext highlighter-rouge">Thread.sleep(...)</code> that adds a random delay to this event generation. This is to mimic the random behaviour of event generation. When this endpoint is accessed with <code class="language-plaintext highlighter-rouge">http://localhost:8099/stream</code> in a web browser, the result would be as follows.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">id</span>:0
event:periodic-event
data:SSE - 2021-02-11T22:29:57.493093900

<span class="nb">id</span>:1
event:periodic-event
data:SSE - 2021-02-11T22:29:59.896589400

<span class="nb">id</span>:2
event:periodic-event
data:SSE - 2021-02-11T22:30:02.135695500

<span class="nb">id</span>:3
event:periodic-event
data:SSE - 2021-02-11T22:30:03.512121300

<span class="nb">id</span>:4
event:periodic-event
data:SSE - 2021-02-11T22:30:05.739262100

<span class="nb">id</span>:5
event:periodic-event
data:SSE - 2021-02-11T22:30:07.930640900
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">EventConsumerProxy</code> is intended to act as an intermediary, which creates a stream by consuming the stream from the <code class="language-plaintext highlighter-rouge">EventEmitter</code>. To access the <code class="language-plaintext highlighter-rouge">EventEmitter</code> over HTTP, <code class="language-plaintext highlighter-rouge">EventConsumerProxy</code> has a service <a href="https://github.com/000407/sse_demo/blob/master/src/main/java/com/kaze2/sse_demo/service/EventService.java">`EventService</a>, which is written as follows.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">EventService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">WebClient</span> <span class="n">client</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">EventService</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">client</span> <span class="o">=</span> <span class="nc">WebClient</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="s">"http://localhost:8099"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Flux</span><span class="o">&lt;</span><span class="nc">ServerSentEvent</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="nf">consumeStream</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ParameterizedTypeReference</span><span class="o">&lt;</span><span class="nc">ServerSentEvent</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">type</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ParameterizedTypeReference</span><span class="o">&lt;&gt;()</span> <span class="o">{};</span>

        <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
                <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"/stream"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">TEXT_EVENT_STREAM</span><span class="o">)</span>
                <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                <span class="o">.</span><span class="na">bodyToFlux</span><span class="o">(</span><span class="n">type</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Flux</span><span class="o">&lt;</span><span class="nc">SomeDTO</span><span class="o">&gt;</span> <span class="nf">createStream</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ParameterizedTypeReference</span><span class="o">&lt;</span><span class="nc">SomeDTO</span><span class="o">&gt;</span> <span class="n">type</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ParameterizedTypeReference</span><span class="o">&lt;&gt;()</span> <span class="o">{};</span>

        <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
                <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"/item"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
                <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                <span class="o">.</span><span class="na">bodyToFlux</span><span class="o">(</span><span class="n">type</span><span class="o">)</span>
                <span class="o">.</span><span class="na">delaySubscription</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span>
                <span class="o">.</span><span class="na">repeat</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>This class</p>
<ul>
  <li>employs <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/reactive/function/client/WebClient.html"><code class="language-plaintext highlighter-rouge">WebClient</code></a> which is a <strong><em>Non-blocking, reactive client to perform HTTP requests, exposing a fluent, reactive API over underlying HTTP client libraries such as Reactor Netty</em></strong>.</li>
  <li>has <code class="language-plaintext highlighter-rouge">Flux&lt;ServerSentEvent&lt;String&gt;&gt; consumeStream()</code>, that the <code class="language-plaintext highlighter-rouge">webClient</code> instance accesses the <code class="language-plaintext highlighter-rouge">EventEmitter</code> and creates the stream of events.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">.accept(MediaType.TEXT_EVENT_STREAM)</code> - Sets the expected content type. Notice the accept type is set to <code class="language-plaintext highlighter-rouge">text/event-stream</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">.bodyToFlux(type)</code> - Creates a <a href="https://projectreactor.io/docs/core/release/api/reactor/core/publisher/Flux.html"><code class="language-plaintext highlighter-rouge">Flux</code></a> of type <code class="language-plaintext highlighter-rouge">type</code>, which is a <a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/ParameterizedTypeReference.html"><code class="language-plaintext highlighter-rouge">ParameterizedTypeReference</code></a> of type <code class="language-plaintext highlighter-rouge">ServerSentEvent</code>.</li>
    </ul>
  </li>
</ul>

<p>This service is consumed by <a href="https://github.com/000407/sse_demo/blob/master/src/main/java/com/kaze2/sse_demo/controller/EventController.java"><code class="language-plaintext highlighter-rouge">EventController</code></a>. Notice the use of the <code class="language-plaintext highlighter-rouge">map(Function&lt;? super T,? extends V&gt; mapper)</code> method to map the stream items into a new stream of <code class="language-plaintext highlighter-rouge">ServerSentEvent</code>s which are based on the origin <code class="language-plaintext highlighter-rouge">EventEmitter</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">path</span> <span class="o">=</span> <span class="s">"/stream"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Flux</span><span class="o">&lt;</span><span class="nc">ServerSentEvent</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="nf">streamEvents</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Received request to stream events"</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">eventService</span><span class="o">.</span><span class="na">consumeStream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"DATA: {}"</span><span class="o">,</span> <span class="n">s</span><span class="o">.</span><span class="na">data</span><span class="o">());</span>
                    <span class="k">return</span> <span class="nc">ServerSentEvent</span><span class="o">.&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">builder</span><span class="o">()</span>
                            <span class="o">.</span><span class="na">id</span><span class="o">(</span><span class="s">"PROXY::"</span> <span class="o">+</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">id</span><span class="o">()).</span><span class="na">orElse</span><span class="o">(</span><span class="s">"UNKNOWN_ID"</span><span class="o">))</span>
                            <span class="o">.</span><span class="na">event</span><span class="o">(</span><span class="s">"PROXY::"</span> <span class="o">+</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">event</span><span class="o">()).</span><span class="na">orElse</span><span class="o">(</span><span class="s">"UNKNOWN_EVENT"</span><span class="o">))</span>
                            <span class="o">.</span><span class="na">data</span><span class="o">(</span><span class="s">"PROXY::"</span> <span class="o">+</span> <span class="n">s</span><span class="o">.</span><span class="na">data</span><span class="o">())</span>
                            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
                <span class="o">});</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>When this endpoint is accessed with <code class="language-plaintext highlighter-rouge">http://localhost:8088/stream</code> in a web browser, the result would be as follows.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">id</span>:PROXY::0
event:PROXY::periodic-event
data:PROXY::SSE - 2021-02-11T22:30:56.395588800

<span class="nb">id</span>:PROXY::1
event:PROXY::periodic-event
data:PROXY::SSE - 2021-02-11T22:30:58.741941900

<span class="nb">id</span>:PROXY::2
event:PROXY::periodic-event
data:PROXY::SSE - 2021-02-11T22:31:00.987860

<span class="nb">id</span>:PROXY::3
event:PROXY::periodic-event
data:PROXY::SSE - 2021-02-11T22:31:02.383951

<span class="nb">id</span>:PROXY::4
event:PROXY::periodic-event
data:PROXY::SSE - 2021-02-11T22:31:04.744465

<span class="nb">id</span>:PROXY::5
event:PROXY::periodic-event
data:PROXY::SSE - 2021-02-11T22:31:06.507792900
</code></pre></div></div>

<p>When the result streams are compared, it is evident that the <code class="language-plaintext highlighter-rouge">EventConsumerProxy</code> is actually routing the streamed response from <code class="language-plaintext highlighter-rouge">EventEmitter</code>.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="nc">Flux</span><span class="o">&lt;</span><span class="nc">SomeDTO</span><span class="o">&gt;</span> <span class="nf">createStream</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">ParameterizedTypeReference</span><span class="o">&lt;</span><span class="nc">SomeDTO</span><span class="o">&gt;</span> <span class="n">type</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ParameterizedTypeReference</span><span class="o">&lt;&gt;()</span> <span class="o">{};</span>

        <span class="k">return</span> <span class="n">client</span><span class="o">.</span><span class="na">get</span><span class="o">()</span>
                <span class="o">.</span><span class="na">uri</span><span class="o">(</span><span class="s">"/item"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="nc">MediaType</span><span class="o">.</span><span class="na">APPLICATION_JSON</span><span class="o">)</span>
                <span class="o">.</span><span class="na">retrieve</span><span class="o">()</span>
                <span class="o">.</span><span class="na">bodyToFlux</span><span class="o">(</span><span class="n">type</span><span class="o">)</span>
                <span class="o">.</span><span class="na">delaySubscription</span><span class="o">(</span><span class="nc">Duration</span><span class="o">.</span><span class="na">ofSeconds</span><span class="o">(</span><span class="mi">1</span><span class="o">))</span>
                <span class="o">.</span><span class="na">repeat</span><span class="o">();</span>
    <span class="o">}</span>
</code></pre></div></div>

<p>In the above snippet of <code class="language-plaintext highlighter-rouge">EventService</code>, the method <code class="language-plaintext highlighter-rouge">Flux&lt;SomeDTO&gt; createStream()</code> repeatedly consumes a typical REST endpoint that provides <code class="language-plaintext highlighter-rouge">application/json</code> in evey 1 second, creating a stream. This is particularly useful as a method of pinging a source for updates. Notice</p>

<ul>
  <li>the use of <code class="language-plaintext highlighter-rouge">.delaySubscription(Duration.ofSeconds(1))</code> delaying access to the endpoint by 1 second</li>
  <li>the use of <code class="language-plaintext highlighter-rouge">repeat()</code> which plays the same HTTP request repeatedly, that which creates a stream of updates.</li>
</ul>

<h3 id="a-final-note">a final note…</h3>

<p>Server-Sent Events has its own merits and demerits. For merits</p>

<ul>
  <li>it uses HTTP, so supporting this is trivial</li>
  <li>it can be poly-filled (using something like JS) to “backport” to browsers with no support</li>
  <li>has reconnect and event ID built-in</li>
  <li>it is particularly useful in the cases where there are one-way server originated communication requirements (e.g. live updates to stock prices)</li>
</ul>

<p>However, these could be achieved only within the following constraints/limitations</p>

<ul>
  <li>SSE is limited to UTF-8; no support binary data</li>
  <li>SSE is having an imposed limitation on maximum number of concurrent connections. This can be particularly hindering when opening multiple tabs as the limit is per browser and set to a very low number (<a href="https://stackoverflow.com/a/16853226/3126973">about 6</a>, 100 by default with HTTP/2 and HTTP/3)</li>
</ul>

<p>That’s it for this one lads. Feel free to drop a comment below. Happy coding! :sunglasses:</p>

<h3 id="references">References</h3>

<ul>
  <li><a href="https://www.ably.io/blog/websockets-vs-sse">WebSockets vs Server-Sent Events</a></li>
  <li><a href="https://www.baeldung.com/spring-server-sent-events">Server Sent Event is Spring</a></li>
  <li><a href="https://stackoverflow.com/a/16853226/3126973">SSE(EventSource): why no more than 6 connections?</a></li>
</ul>]]></content><author><name></name></author><category term="techbits" /><summary type="html"><![CDATA[In client-server architecture, the modes of interaction between the client and the server are primarily two-fold. They are namely Push and Pull. Generally, the server is understood to be passive, where the interaction is initiated from the side of the client, making the client the active party. Whenever the client wants, the client will poke the server saying hey, are you up? and the server will keep an ear on the line listening to such hey! messages. This is known as pull-messaging. But this is not the case, when the server wants to notify the client when there is a specific event occurred on the side of the server. These events are sent, or pushed to the client as they occur. This is the reason why we employ Server-Sent Events in the first place.]]></summary></entry><entry><title type="html">මනුෂ්‍ය සංහතියේ පරම සතුරා</title><link href="https://kanchana.senadheera.net/mage_weyikkiya/2021/01/09/worst-enemy-of-mankind.html" rel="alternate" type="text/html" title="මනුෂ්‍ය සංහතියේ පරම සතුරා" /><published>2021-01-09T19:30:00+00:00</published><updated>2021-01-09T19:30:00+00:00</updated><id>https://kanchana.senadheera.net/mage_weyikkiya/2021/01/09/worst-enemy-of-mankind</id><content type="html" xml:base="https://kanchana.senadheera.net/mage_weyikkiya/2021/01/09/worst-enemy-of-mankind.html"><![CDATA[<p>“<strong>විනාශය/වැනසීයාම/අනියත බව</strong>” යන ඒවා මෙලොව ඇති සියලු ජීවී අජීවී සංස්කාරයන්ට පොදු ධර්මතාවයකි. ඒ හැරුණුකොට නානාවිධ ධර්මතා කොතෙකුත් ඇත. නවීන යැයි කියාගන්නා බටහිර විද්‍යාව, මේ ධර්මතාවලට අභියෝග කරමින් ඒ ධර්මතා අතික්‍රමණය කරන්නට උත්සාහ කරන්නේ අද ඊයේ සිට නොවේ. “<strong><em>අම්මෝ විද්‍යාව! ඒක පට්ට දියුණුයි, හරි ෂෝයි!</em></strong>” ආදී කයිවාරු පම්පෝරි, අපි “<em>පණ යනකම්</em>” අසා ඇත්තෙමු. ඒ සියලු පම්පෝරි කයිවාරු කාරයන්ට හොම්බට අනින්නට මේ වසර මුලදීම ස්වභාව ධර්මයා තීරණය කළේය. ප්‍රතිඵලය වූයේ, මේ වන විටත් මිලියන දෙකකට ආසන්න ජනයාට මරු කැඳවූ නව කොරෝනා වෛරසයේ ආගමනයයි. නවීන පන්නයේ සෞඛ්‍ය, තාක්ෂණික ආදී යටිතල ව්‍යුහයන්ගෙන් සමන්විත යැයි, අප මහ ඉහළින් සැමරූ සියළු ජාතීන් දණගස්වන්නට නව කොරෝනා වෛරසය සමත් වූ බවට ඉතිහාසය සාක්ෂි දරයි. කෙදිනක හෝ අපේ මතු පරම්පරාවන් “<strong><em>අපෝ උඹලා මහ ලොකුවට කයිවාරු ගැහුවට වෙලා තියෙන්නෙ මෙහෙමනේ</em></strong>” කියා අපේ මුහුණටම කිවහොත්, අපට කට උත්තර නැති වනවා නොඅනුමානය.</p>

<p>ස්වභාව ධර්මය තුළ සියළු ජීවී කොට්ඨාශයන්ට එදිරිව, තම පැවැත්මට අභියෝග කරන කාරණා රැසක් පවතී. ලෙඩරෝග, විලෝපිකයන් ආදී මෙකී නොකී කාරණා සියල්ල පවතින්නේ එක් එක් ජීවී කොට්ඨාශයේ ගහනය පාලනය සඳහාය. මේ පාලක ධර්මතාවන් අප විසින් “<strong><em>සතුරන්</em></strong>” ලෙස හඳුන්වන්නට උත්සුක වුවත්, සත්‍ය වශයෙන්ම ඒවා සතුරන් නොවන බව මාගේ අදහසයි. කොරෝනා වෛරසයේ ව්‍යාප්තිය ආරම්භයත් සමග, විවිධ පාර්ශවයන් විවිධ පාර්ශවයන්ට ඇඟිල්ල දිගු කිරීමට උත්සුක වූ අතර, එසේ චෝදනාවට ලක් වූ සමහර පාර්ශවයන්ගේ ක්‍රියාකලාපයන් ඔස්සේ ඔවුන් “<strong><em>තොප්පිය දාගත්</em></strong>” අයුරක්ද පෙනී යයි. කොයි හැටි වෙතත් ඒ සියළු ආකාරයේ විගඩම් ඔස්සේ යළි යළිත් සනාථ වූයේ සත්ත්ව කොට්ඨාශයක් වශයෙන් මානවයා කෙතරම් භේද භින්නව පවතීද, ඒ භේද භින්න කම් කෙතරම් භයානකද යන්න පමණකි.</p>

<p>මානව ශිෂ්ටාචාරයේ ඉතිහාසය දෙස බලන කල, “<strong><em>ශිෂ්ටාචාරය</em></strong>” යන වචනය එයට සුදුසු නැති බව මාගේ වැටහීමයි. ඉතිහාසය පුරා සිදුවූ, අවාසනාවකට මෙන් තව දුරටත් සිදුවෙමින් පවතින ලේ වැගිරීම් දෙස බලන කල, එවන් ලේ වැගිරීම් තිරිසන් සතුන් ගහනයන් තුළ වත් සිදු නොවෙන බව නොකිවමනාය. ශරීර ස්වභාවය අතින් දුර්වලම සතුන්ගෙන් එකෙක් වූ මානවයා, මොළයේ මහිමයෙන් ආහාර දාමයේ ඉහලටම පැමිණෙන්නට සමත් වූ බව පැහැදිලිය. එසේ තම පැවැත්ම සනාථ කරගන්නට සමත් “<strong><em>ශක්තිවන්තයා</em></strong>” වන්නට මානවයාට හැකි වූ නමුත්, ඒ පැවැත්ම පිළිබඳ සැක සංකා මතුවෙමින් පවතී. එයට මූලිකම හේතුව වන්නේ, කෙතරම් බුද්ධිය තිබුණද, සිය පැවැත්මට එදිරි ප්‍රධානතම සතුරා කවරෙක්ද යන්න වටහා ගැනීමට මානව වර්ගයා අසමත් වීමයි.</p>

<p>මට දැනෙන හැටියට එකී ප්‍රධානම සතුරා නම් “<strong><em>*වාදය</em></strong>” යි. “මේ මොන හරුපයක්දෑ?” යි කල්පනා කරන ඔබට පහතින් සඳහන් වචන ලැයිස්තුව සලකා බලන ලෙස මම යෝජනා කරමි.</p>

<ul>
  <li>අධිරජවාදය/අධිරාජ්‍යවාදය (Imperialism)</li>
  <li>කොමියුනිස්ට්වාදය (Communism)</li>
  <li>ධනවාදය (Capitalism)</li>
  <li>සමාජවාදය (Socialism)</li>
  <li>ප්‍රජාතන්ත්‍රවාදය (Democracy)</li>
  <li>ස්ත්‍රීවාදය (Feminism)</li>
  <li>පුරුෂවාදය (Masculinism)</li>
  <li>ෆැසිස්ට්වාදය (Fascism)</li>
  <li>බුද්ධිවාදය (Rationalism/Intellectualism)</li>
  <li>ලිංගභේදවාදය (Sexism)</li>
  <li>ජාතිවාදය (Racism)</li>
  <li>ආගම්වාදය (Religionism)</li>
  <li>සමානාත්මතාවාදය (Egalitarianism)</li>
  <li>රැඩිකල්වාදය හා ප්‍රතිරැඩිකල්වාදය (Radicalism &amp; Anti-Radicalism)</li>
  <li>ශාකාහාරවාදය (Vegitarianism)</li>
  <li>නිදහස්වාදය/මධ්‍යස්ථවාදය/ස්වතන්ත්‍රවාදය (Liberalism)</li>
  <li>සංසිද්ධි වාදය (Phenomenalism)</li>
  <li>පරිපූර්ණතාවාදය (Perfectionism)</li>
  <li>ත්‍රස්තවාදය (Terrorism)</li>
  <li>සංරක්ෂණවාදය (Conservatism)</li>
</ul>

<p>යනාදී වශයෙන් මෙකී ලැයිස්තුව ඉතාම දිගු එකක් බවට පත්වන්නට ගතවන්නේ ඉතාම කෙටි කාලයකි. මේ සියළු ආකාර වාදයන් හා අනුරූප ඉංග්‍රීසි නම් බොහෝ විට අවසන් වන්නේ “<strong><em>ඉස්ම් (ism)</em></strong>” ප්‍රත්‍යයෙන් බැවින් “<strong>අපේ කාලයේ අනන්ත ජින</strong>” නොහොත් ගූගල් ගෙන් මේ ගැන විමසූ කල මට ලැබුණු <a href="https://www.thefreedictionary.com/words-that-end-in-ism">ප්‍රතිඵලයකි මේ</a>. මෙකී ලැයිස්තුවේ ඇති, “ඉස්ම්” ප්‍රත්‍යයෙන් අවසන් වන වචන 760ක් පමණ අතරින් 80% පමණ, කිසිදු වාදයකට අයත් නොවේ යැයි සැලකූවත්, එසේ කිසියම් වාදයක් හැඳින්වෙන පද 150ක් පමණ තිබේ යැයි අපට සාධාරණ වශයෙන් අනුමාන කළ හැකිය. මේ නයින් බලන කල මානව ජාතිය, එසේ නැතහොත් මානවයා නම් සත්ත්ව කොට්ඨාශය මේ වනවිටත් අවම වශයෙන් කැබලි 150කට වත් බෙදී වෙන්වී ඇති බව ඉතාම පැහැදිලිය.</p>

<p>මේ කුමන වාදය පිළිබඳව කවර කතා කීවද, මේ සියලු වාදයන් සතු එක් පොදු ලක්ෂණයක් ඇත. එය නම් මේ සියලු වාදයන් වල ඇති දැඩි අන්තගාමී ස්වභාවයයි. මේ සියලු ආකාරයේ වාදයන්ගෙන් මූලිකවම උත්සාහ කෙරෙන්නේ සමාජය හා එහි සංරචකයන් ස්ථායි රාමුවකට/පීල්ලකට එකෙල්ල කිරීමටය. මේ සියලු වාදයන් වෙනුවෙන් පෙනී සිටින විද්‍යාර්ථීන්ට අනුව, ඔවුන්ගේ වාදයෙන් පිට කිසිදු විකල්පයක් නැත. උදාහරණ වශයෙන් ගත් කල, ධනවාදී අර්ථ ක්‍රමයක් තුල රාජ්‍යයට අයත් ව්‍යවසායන් සඳහා පැවැත්මක් නැත. රාජ්‍යයට අයත් ව්‍යවසායන් පෞද්ගලීකරණය කරන තුරු ධනවාදීන්ට නින්ද නොයන්නේ එබැවිනි. ෆෙඩරල්වාදී දේශපාලන සන්දර්භයක් තුල, මධ්‍යගත පරිපාලනයකට ඉඩ නැත. ලංකාවේ ෆෙඩරල්වාදීන් ඉඩම් හා පොලිස් බලතල ඉල්ලා “මැරෙන්න හදන්නේ” එබැවිනි. බුද්ධිවාදී චින්තනයක් තුල, භාවාත්මක සංකල්පනාවන්ට ඉඩ නැත. බුද්ධිවාදීන්ට හැඟීම් වලට ඉඩ දෙන මිනිසුන් මෝඩයන් හෝ දුර්වලයන් ලෙස පෙනෙන්නේ එබැවිනි. සංක්ෂිප්තව කිවහොත් මෙකී සියලු වාදීන්ට, නොඑසේනම් කිසියම් වාදයක් තුල අන්තගාමීව එල්බගත්තවුන්ට, සමාජයේ සෑම දෙයක්ම ද්වීමය (binary) කාරණාවන්ය. ඔවුන් සියලු දේ පිළිබඳ තීන්දු තීරණ ගන්නේ, ක්‍රියාත්මක වන්නේ මූලික වශයෙන් “මගේ වාදයට එකඟද? නැද්ද?” යන කාරණාව මත පදනම්වය. ඒ හැර, උචිත අනුචිත බව, සාධාරණය, යුක්තිය වැනි කාරණාවලට මේ වාදීන් සංවේදී නැති තරම්ය. සමාජවාදය වේවා, ප්‍රජාතන්ත්‍රවාදය වේවා, මේ සියලුම ආකාරයේ වාදයන් තුල මෙවන් අන්තගාමී මූලධර්මයන් කොතෙකුත් ඇති බව නොකිවමනාය.</p>

<p>මීට අමතරව මේ සියලුම වාදයන් තුල මට පෙනෙන අනෙකුත් පොදු කාරණාව නම් මේවායේ ඇති දැඩි අනම්‍යශීලී භාවයයි. එනම් කිසියම් වාදයක් ගොඩ නැගී ඇති/ඇතැයි කියැවෙන මූලික හරයන්ගෙන් විතැන් වීමට දක්වන ප්‍රතිරෝධයයි. මෙකී ප්‍රතිරෝධය නිසා ඇතිවන නොවැළැක්විය හැකි ප්‍රතිඵලයක් වන්නෙ “වෙනස්කම් සඳහා ඇති වන ප්‍රතිවිරුද්ධතාවය”යි. මෙකී සියලු වාදයන් බිහිවන්නේ ඉතිහාසයේ ඒ ඒ කාල පරාසයන් තුල පැවති සමාජ සන්දර්භයන් මත බව අප සියලු දෙනාම අවිවාදයෙන් පිළිගත යුතුමය. මේවා බොහොමයක ජනනය හා ඉතිහාසය දෙස බලන කල, එක් එක් කාල පරාසයන් තුල සමාජයේ පැවති විවිධාකාර හැල හැප්පීම් වල ප්‍රතිඵලයන් ලෙස එකී වාදයන් ගොඩ නැගී ඇති බැව් පැහැදිලිය. එමෙන්ම කිසියම් වාදයක ප්‍රතිඵලයක් ලෙස හෝ කිසියම් වාදයකට එදිරිව හෝ විකල්ප වශයෙන් ගොඩනැගුනු වාදයන් ද ඇත. උදාහරණ වශයෙන් ගත් කල, යුරෝපාකරයේ ජාතිවාදය යනු යුරෝපයේ මුල් බැසගෙන ඇති අධිරාජ්‍යවාදයේ හා ධනවාදයේ සෘජු ප්‍රතිඵලයකි. කොමියුනිස්ට්වාදය උපදින්නේ ධනවාදයට එදිරි “එකම විකල්පය” වශයෙනි. මින් පෙර වාක්‍ය දෙකෙහි මා විසින් සඳහන් කරන්නට යෙදුනු වාදයන් හතර “අධිරාජ්‍යවාදය”, “ධනවාදය”, “කොමියුනිස්ට්වාදය” හා “ජාතිවාදය” ගැන නැවත කල්පනා කර බලමු. මෙකී වාදයන්ගේ නාමයෙන්, හෝ ඒවායෙහි ප්‍රතිඵල වශයෙන් මිනිසුන් කී දෙනෙක් ඝාතනය වන්නට ඇතිද? ඔබත් මමත් අප සැවොම පිළිගත යුතු යථාර්ථය නම්, එකී පැනයට පිළිතුර ගැන මෙය කියවන ඔබට හෝ මට අල්පමාත්‍ර හෝ අදහසක් නොමැති බවය. තමුන් එල්බගත් කිසියම් වාදයක නාමයෙන් තවත් පුද්ගලයෙකුගේ ජීවත් වීමේ අයිතිය උල්ලංඝනය කරන්නට, මානසික රෝගියෙක් නොවන කෙනෙක් උත්සුක වන්නේ නම් එයින් කියැවෙන්නේ එක්කෝ ඒ පුද්ගලයාගේ වරදක් ඇති බවය. එසේ නොමැතිනම් ඒ වාදයෙහි කිසියම් වරදක් ඇති බවය. මේ දෙකෙන් එකක්වත් යහපත් ලක්ෂණ නොවන බව අමුතුවෙන් කිව යුතු නොහේ.</p>

<p>මේ සියළු කාරණා කාරණා අතර, එකක් ඉතාම පැහැදිලිය. එනම් මේ සියළු ආකාරයේ වාදයන්ට උඩගෙඩි දෙමින් මේවා අවුස්සා තබමින් මේවා නිසා සමාජය තුල ඇතිවන කුණු කන්දල් වලින් බඩ ගෝස්තරය වඩා ගන්නට වෙර කන සල්ලිකාර අතලොස්සකින් සැදුම්ලත් පැලැන්තියක් අප අතර සිටින බව ය. මට දැනෙන හැටියට වර්තමානයේ “රට” නමැති සංකල්පය හුදු වෙස් මුහුණක් පමණි. සත්‍ය වශයෙන්ම ගත් කල රටවල් නොමැති තරම්ය. ඇත්තේ “සමාගම්” ය. ලෝක බලවතුන් යැයි සැලකෙන අමෙරිකාව, චීනය, රුසියාව, ප්‍රංශය ආදියෙන් ආරම්භ වී ඉන්දියාව, ශ්‍රී ලංකාව ආදිය ඔස්සේ සෝමාලියාව, ඉතියෝපියාව ආදිය දක්වා සියළුම ඒවා සැබැවින්ම “රටවල්” නොව “සමාගම්” බව ඉතාම පැහැදිලිය. නිපුණතාව මත නොව බලය හා ධනය අවභාවිත කරන්නන්ගේ උවමනාවන් මත ගොඩනැගුණු, එවැන්නන්න් විසින් ඉහල මට්ටම් අරක් ගැනුනු ධූරාවලීන් මගින් පාලනය කෙරෙන මෙම “සමාගම්” වල මෙකී ධූරාවලීන්ගේ ඉහලින් වැජඹෙන මෙම තක්කඩියන්ගේ උවමනා එපා කම් වලට අනුව, මෙකී ධූරාවලීන්ගේ පහල මට්ටම් වල ජීවිතය වෙනුවෙන් අනවරත අරගලයක යෙදෙන දුර නොදක්නා මිනිසුන් ඉහතින් සඳහන් කල නානාවිධ වාදයන් ඔස්සේ බෙදී වෙන්වී කුලල් කා ගනිමින් සිටින බැව් මගේ වැටහීමයි. ලෝකයේ ඇති ස්වෛරී රාජ්‍යයන් අතුරෙන් සියල්ලක්ම පාහේ මෙවැනි “සමාගම්” යැයි මට හැඟෙන බැව් මෙහි ලියා තබන්නේ හද පිරි කණගාටුවෙනි.</p>]]></content><author><name></name></author><category term="mage_weyikkiya" /><summary type="html"><![CDATA["විනාශය/වැනසීයාම/අනියත බව" යන ඒවා මෙලොව ඇති සියලු ජීවී අජීවී සංස්කාරයන්ට පොදු ධර්මතාවයකි. ඒ හැරුණුකොට නානාවිධ ධර්මතා කොතෙකුත් ඇත. නවීන යැයි කියාගන්නා බටහිර විද්‍යාව, මේ ධර්මතාවලට අභියෝග කරමින් ඒ ධර්මතා අතික්‍රමණය කරන්නට උත්සාහ කරන්නේ අද ඊයේ සිට නොවේ. "අම්මෝ විද්‍යාව! ඒක පට්ට දියුණුයි, හරි ෂෝයි" ආදී කයිවාරු පම්පෝරි, අපි "පණ යනකම්" අසා ඇත්තෙමු. ඒ සියලු පම්පෝරි කයිවාරු කාරයන්ට හොම්බට අනින්නට...]]></summary></entry><entry><title type="html">Consumption Economy: Mother of all Mess-Ups</title><link href="https://kanchana.senadheera.net/mage_weyikkiya/2020/08/12/consumption-economy-mess-ups.html" rel="alternate" type="text/html" title="Consumption Economy: Mother of all Mess-Ups" /><published>2020-08-12T01:14:00+00:00</published><updated>2020-08-12T01:14:00+00:00</updated><id>https://kanchana.senadheera.net/mage_weyikkiya/2020/08/12/consumption-economy-mess-ups</id><content type="html" xml:base="https://kanchana.senadheera.net/mage_weyikkiya/2020/08/12/consumption-economy-mess-ups.html"><![CDATA[<p>Sometime back I stumbled upon this video in YouTube, in which some member in the audience asks Dr. Jordan Peterson about the individual responsibility versus the issues such as climate change, economic crisis and so forth. It is really interesting how he responded and as he started to respond, how the questioner’s facial expressions changed into immediate denial.</p>

<div class="video-container">
    <iframe class="video" src="https://www.youtube.com/embed/qTk-69f64KU" allowfullscreen=""></iframe>
</div>

<p>The question from the audience was</p>

<blockquote>
  <p>I want to know what is your answer to young people for some of the really big of problems facing Humanity like the climate catastrophe, like economic crisis, like the precarious job market? Because I just don’t like you told us much about individual responsibility. Most of us are never gonna be able to afford to have all these assets to have responsibility over. So what is your advice beyond banal comments like clean your room?</p>
</blockquote>

<p>From the way I see it, Dr. Peterson absolutely nalied the answer to this question. The response from the rest of the audience (I don’t know if Dr. Peterson brought some of his henchmen to clap and yell whenever he does something show-worthy) and the way the questioner deined the facts that Dr. Peterson brought upon. But I believe that even Dr. Jordan missed out some facts. He was absolutely right when he said</p>

<blockquote>
  <p>My experience has been that people can do a tremendous amount of good for themselves and for the people who are immediately around them by looking to their own inadequacies and their own flaws and the things that they’re not doing in their lives and starting to build themselves up as more powerful individuals. And if they’re capable of doing that, then they’re capable of expanding their career. And if they’re capable of expanding their career and their competence, then they’re capable of taking their place in the community as effective leaders. And then they’re capable of making wise decisions instead of unwise decisions when it comes to making Collective political decision…</p>
</blockquote>

<p>Rightly so eh?</p>

<p>The moderator of the show intervened in the midway of this and uttered the below, which I believe is an understatement that overlooks plenty of facts that need to be taken into account.</p>

<blockquote>
  <p><strong>Individual responsibility does not change the climate</strong>. Does not fix the problem that needs Global Collective responsibility. So I think that’s the core of the question..</p>
</blockquote>

<p>Let’s think about the bold-faced statement above again. He says individual responsibility does not change the climate. Well, not exactly. Here’s why.</p>

<p>It is now a proven fact that Green House Gases (GHG) is one of the main causes of global warming, which in turn results in climate change. The emission of GHG by sector as of 2016 is as follows (yes, 2016 and now it 2020). (Source: <a href="https://www.wri.org/blog/2020/02/greenhouse-gas-emissions-by-country-sector">4 Charts Explain Greenhouse Gas Emissions by Countries and Sectors | World Resources Institute</a>)</p>

<p><img src="/assets/img/posts/consumption-economy-mess-ups/all_ghg_world_2016.png#center" alt="Emission of GHG by Sector" /></p>

<p>According to the breakdown, about 36 gigatonnes (the total weight of 36 million blue whales) are emitted by energy transformation processes. The question is <strong><em>energy for what?</em></strong>. Sadly, the answer is <strong><em>for every damn thing we consume</em></strong>. Confused? Let’s just take a moment to think back about the two mobile phones that you have in your pocket.</p>

<p>It’s made of plastic, metal and many other materials, which needs to be extracted from their sources. Then these go through a very complex transformation process before they are assembled into what we call a smartphone. According to <a href="https://www.lovefone.co.uk/blogs/news/how-much-co2-does-it-take-to-make-a-smartphone#:~:text=How%20much%20CO2%20is%20involved,also%20much%20more%20to%20consider">Lovefone, London</a> manufactory of a smartphone emits about <strong>16kg</strong> of CO<sub>2</sub> and if you consider it’s use for 2 years, it will rise up to <strong>22kg</strong>. By the time I wrote this, I just took a quick peek at <a href="https://worldometers.info/">Worldometer - real time world statistics</a> and this is what I found about society and media.</p>

<p><img src="/assets/img/posts/consumption-economy-mess-ups/wm_today_000.png#center" alt="Worldometers Stats-000" /></p>

<p>In less than a minute…</p>

<p><img src="/assets/img/posts/consumption-economy-mess-ups/wm_today_001.png#center" alt="Worldometers Stats-001" /></p>

<p>Just look at the number of mobile phones sold. The number of mobile phones sold today 5,572,142 to 5,576,781 which is 4500+ phones <strong>in less than a minute!</strong>. Even if we consider it’s only 16kg of CO<sub>2</sub> per phone, we have <strong>more than 72000 kilo grams of CO<sub>2</sub> emitted into the atmosphere in in less than a minute!</strong> Why do you think they are coming out of production lines. Because <strong>we are buying them!</strong> According to <a href="https://www.bankmycell.com/blog/how-many-phones-are-in-the-world#:~:text=According%20to%20GSMA%20real%2Dtime%20intelligence%20data%2C%20there%20are%20now,by%20UN%20digital%20analyst%20estimates">bankmycell.com</a> there are 10.01 billion mobile connections. Funny thing is the world’s population is only about 7+ billions. Do you still think it’s not because of us? Can you still think it’s not us? When I was considering the mobile phones, I was just getting started. I can go on and on into different other consumer goods such as consumer electronics, vehicles, communication equipment and so forth, and this post will become endless, if I am to talk about the goods we we consume on a regular basis which are just <strong>wants</strong> but definitely <strong>not needs</strong>. Now I want you to think about the following.</p>

<ul>
  <li>How you keep your air conditioner running in summer and winter. For how long do you keep that down?</li>
  <li>Your desire to wander around with your friends, taking selfies and posting them on facebook. How much of energy you think you are burning to do that, just doing nothing important.</li>
  <li>How you use your refrigerator. Do you know how much of energy it consumes to keep your food for long?</li>
  <li>How you use other consumer electronics in your house.</li>
  <li>How many coal, diesel, burnt-oil power plants are there in your country? How much of fossil fuel do they burn each year?</li>
  <li>How much of garbage you generate on a daily basis?</li>
</ul>

<p>Be honest to yourself and try to quantify the answers you give to the above. Then multiply that each by 5 billion. (Yes, the world’s population is 7+ billions. But let’s make this a very pessimistic approximation.) That will give you a very brief idea of how much of a damage we as the human race, to to our dear beloved home, the mother earth.</p>

<p>Probably the next question you have for me is <strong><em>Okay, so what?</em></strong>. Well, I think you have an individual responsibility towards this. That is to cut your unnecessary consumption. Let’s converse.</p>

<ul>
  <li><em>Me</em>: What if you don’t buy another phone until you break the current one so that it is not usable?</li>
  <li><em>You</em>: Well, nowadays companies make things in such a way that they break soon.</li>
  <li><em>Me</em>: Okay, point taken. But, you and me are the customers aren’t we? We being the customers, why can’t we form an alliance and force the companies into a track where they are compelled to develop devices which last longer and reparable?
    <ul>
      <li><em>You</em>: Can we?</li>
      <li><em>Me</em>: Why not?</li>
      <li><em>You</em>: Well, for starters they don’t have to listen to us.</li>
      <li><em>Me</em>: I don’t think so. What if we don’t buy the products which are irreparable and short-lived?</li>
    </ul>
  </li>
  <li><em>Me</em>: Why can’t we force governments to enforce laws that which the companies are held liable to reduce, reuse and recycle the products that they output? This is already being done for the batteries of hybrid vehicles. Why not to other productions, especially the electronics and so on?
    <ul>
      <li><em>You</em>: Whoa whoa wait… Are you suggesting that they should collect the broken things back?</li>
      <li><em>Me</em>: Why not?</li>
      <li><em>You</em>: How can we hand them over? I am not gonna stay in long queues man.. I have better things to do.</li>
      <li><em>Me</em>: Well, I don’t think you have better things than that. They can always facilitate that. Of course it will be bit of a burden to us as well. But that’s the price you should pay, one because you used it and two because it is your <strong><em>Individual Responsibility</em></strong>…</li>
    </ul>
  </li>
</ul>

<p>Likewise, you can think of other aspects also and reach to an ultimate conclusion that it’s a matter of <strong><em>everybody’s individual responsibility</em></strong>. You have to thoroughly understand that</p>

<p>Countries like China and India and others which are having a production economy, are adapting a strategy of bombarding the market with the products. Just think how much of junk we buy when we get into an electronics shop, just because we think it’s cool. Just think how useless a tablet PC for most of you. Don’t you have one at your home that which not you are using? I have two at home. I am so glad that none of those are mine. When I was about to commit that idiocy, luckily one of my friends told me that it won’t be used after sometime. Thinking back now, I am so grateful to him. Same story goes with motor vehicles as well.</p>

<p>My country Sri Lanka, is being bombarded with cheap shitty vehicles. When I walk around the capital, I see a lot of them laying around, rusting under the sun and rain. Wish our people had brains to not to buy them. If we didn’t buy them, we wouldn’t have them lying around as garbage. Why do you think our governments do not have brains to properly regulate them? Simply because the individuals in the government do not have that responsibility. Why? They are from the same bunch of mediocre people, chosen by the mediocre people. They are nothing more than those mediocre people, whom they have been chosen by. We use so much of energy to produce low quality, short-lived, less useful products and then they become garbage. From the beginning of their lifecycle, they keep on emitting GHGs. How much of energy are we talking about? Refer to the chart below. (Source: <a href="https://ourworldindata.org/energy">Energy - Our World in Data</a>).</p>

<p><img src="/assets/img/posts/consumption-economy-mess-ups/world_energy.png#center" alt="Energy - Our World in Data" /></p>

<p>Water droplets collected together becomes the sea, that has the power to wipe entire regions. We the general public hold the power to wipe out all the BS that the wealthy few utter everytime. But people do not understand their true power. Instead of becoming the hero of thy self, people go behind some wealthy few treating them as heros. Those wealthy few who are induced heros, put on a fake cape and act like heros and seduce the mediocre people and make puppets of them. Our greed for wants is why we consume so much. Our consumption is why some cunning few are rich. In order to make more money, they transform anything and everything into something they can sell. We, blinded by our endless greed, endup buying those crap that add no value to our life, like bloody idiots.</p>

<p>Changing this and breaking this vicious cycle takes a long way, which all of it starts from within, so called <strong><em>the individual responsibility</em></strong>. You put your room together, then get into your house. Then you can preach the community about having a clean house. Likewise, try to cut your consumption individually. Then you can tell people around you to do so. Make sure they don’t just blindly follow you. Make them understand this well enough so that they can set the example to some other one. That’s how ideas propagate. That’s how we can unite. Most importantly, understand that thinking like</p>

<blockquote>
  <p>Most of us are never gonna be able to afford to have all these assets to have responsibility over..</p>
</blockquote>

<p>is utter BS. I am not exactly sure what the questioner exactly meant by <strong><em>all these assets</em></strong>. If that means something like you need power or wealth to have responsibility over, then no you don’t need wealth. As for the power, <strong><em>Open up your eyes! You already hold the power. It’s a matter of changing your lifestyle, which is something individual…</em></strong></p>]]></content><author><name></name></author><category term="mage_weyikkiya" /><summary type="html"><![CDATA[Someone says I want to know what is your answer at two young people for some of the really big of problems facing Humanity like the climate catastrophe like economic crisis like the precarious job market? Because I just don't like you told us much about individual responsibility. Most of us are never gonna be able to afford to have all these assets to have responsibility over. So what is your advice beyond banal comments like clean your room? to Dr Jordan Peterson. Even though his answer and the questioner's facial expression is priceless, some important fact was missed out by everyone, which is...]]></summary></entry><entry><title type="html">ප්‍රජාතන්ත්‍රය පජාත වීම</title><link href="https://kanchana.senadheera.net/mage_weyikkiya/2020/08/10/messed-up-democracy.html" rel="alternate" type="text/html" title="ප්‍රජාතන්ත්‍රය පජාත වීම" /><published>2020-08-10T12:06:00+00:00</published><updated>2020-08-10T12:06:00+00:00</updated><id>https://kanchana.senadheera.net/mage_weyikkiya/2020/08/10/messed-up-democracy</id><content type="html" xml:base="https://kanchana.senadheera.net/mage_weyikkiya/2020/08/10/messed-up-democracy.html"><![CDATA[<p>මේ පශ්චාත් මැතිවරණ සමයයි. අමුතු ආකාරයේ නාඩගම් කල එලි බසින කාලයයි. බලය තහවුරු කරගත්තෝ බලය අහිමිවූවන්ට කෝචෝක් දමමින්, කට මැත දොඩවමින් සිය පාක්ෂිකයන් හමුවට ගොස් පාරේ රතිඤ්ඤා දල්වමින්, කිරිබත් කැවුම් කමින් ඩෙඟා නටති. බලය අහිමිවූවෝ එක්කෝ “අපිට ප්‍රතිසංවිධානය වෙන්න තියෙනවා” කියා ජනමාධ්‍ය ඉදිරියේ “පොඩි ලයින් එකක් දී” තමුන්ගේ ගුලට රිංගා ගනිති. එසේත් නැතිනම් එක පිට එක මාධ්‍ය සාකච්ඡා කැඳවමින් “අපි මේ ප්‍රතිඵලය ගැන සෑහීමකට පත්වෙන්නෙ නෑ. ඡන්දෙ දාපු මිනිස්සු මෝඩයි.” ආදී කතා කියති. ඒ අහු අස්සට මෙවර කොරහ බිඳගෙන ගිය යකෙකුද කරලියට පැමිණ ඇත. මේ යකා ඇතුළු නඩය “ඕක තමා මම කිව්වෙ. දැන්වත් මට ලොකු පුටුව දීලා පලයන්.” කියමින් සිටිති. ඔය අස්සට කේන්දර/ජ්‍යෝතිෂ කාරයන්ගේ “ඔන්න මගේ අනාවැකිය හරි” ආදී කයිවාරු, යක්ෂයාට තම ආත්මය විකිණූ දේශපාලන විචාරයකයන් සහ මාධ්‍යවේදීන් වැනි අයගේ අජූව කතා ආදිය එක් වූ විට මේ නාඩගම ඉතාම විකාරරූපී හාස්‍යජනක එකක් බවට පත්වේ. රටම “ආතල්” ලෝකයකි.</p>

<p>මේ මැතිවරණයේ ප්‍රතිඵල දෙස විමසිල්ලෙන් බැලූ විට පෙනී යන කාරණා කිහිපයක් ගැන ඡන්දදායකයන් වශයෙන් ඔබත් මමත් ඉතාම සුපරීක්ෂාකාරීව සලකා බැලිය යුතු බව මම කල්පනා කරමි. ඉහත කී “පශ්චාත් මැතිවරණ ආතල්” අස්සේ ඒ වැදගත් කාරණා අපගේ අවධානයෙන් ගිලිහී යාමට ඉඩ නොදෙන්නට අප වග බලාගත යුතුය. සමහර දිස්ත්‍රික්ක වල මුල් පෙල මනාපලාභීන් පිළිබඳව මම අවංකවම සතුටු වෙමි. ඔවුන් පාර්ලිමේන්තුවට නවකයන් වුවද, මැතිවරණයට ඉදිරිපත් වීමට පළමු ඔවුන් විසින් ඉටු කල කාර්යභාරය ප්‍රශංසනීය බව අප ඉඳුරාම පිළිගත යුතු බව මාගේ අදහසයි. මම “වොච්ඩෝග්” මාධ්‍යවේදියෙක් නොවෙමි. (බල්ලා යන වචනය තිබූ පමණින් “වොච්ඩෝග්” යන වචනය වැරදියට වටහාගෙන වල්ගය පාගා ගන්නවුන් ගැන මට ප්‍රශ්නයක් නැත. වල්ගය පෑගී මල පැන්න අයෙක් වේනම් “වොච්ඩෝග් ජ’නලිස්ම්” යන්න ගූගල්හි සොයාබලන මෙන් මම යෝජනා කරමි) මම වොච්ඩෝග් මාධ්‍යකරණයේ නොයෙදෙන බැවින්, මෙකී පුද්ගලයන්ගේ ජීවිතවල රහස්‍ය කාරණා (උදා: කවුරු හරි ජඩ පොලිටික්කෙක් එක්ක ඩීල් දානවද? හොරකම් කරන්න වංචා කරන්න කැස කවනවද? එහෙම හොරකම් වංචා දූෂණ පිළිබඳ ඉතිහාසයක් තියෙනවද? රට විකුණන්න යටින් ඩීල් දානවද?) පිළිබඳ මම නොදනිමි. මට මේ ගැන ඇති වටහාගැනීම පදනම් වන්නේ මේ පුද්ගලයින් හා සම්බන්ධව ප්‍රසිද්ධ මාධ්‍ය ඔස්සේ විකාශය වන කාරණා වලට අනුවය. රට ජාතිය හා සම්බන්ධ කාරණාවලට ඔවුන්ගේ මැදිහත්වීම් දෙස බලන විට, ඔවුන් විසින් පාර්ලිමේන්තු මන්ත්‍රීවරුන් වශයෙන් සාධනීය කාර්යභාරයක් ඉටුකරනු ඇතැයි මම උදක්ම බලාපොරොත්තු වෙමි. මේ පුද්ගලයන්ගේ ජීවිත හා සම්බන්ධව කිසියම් යටිපෙල ක්‍රියාදාමයන් පවතින්නේ නම් ඒවා ගැන රටට හෙලිදරව් කිරීමේ වෘත්තීයමය වගකීම ඇත්තේ “වොච්ඩෝග්” මාධ්‍යවේදීන් සතුවය.</p>

<p>සමහර දිස්ත්‍රික්ක වල ඡන්දදායකයන් ඥානාන්විත ලෙස කටයුතු කරද්දී, දිස්ත්‍රික්ක කිහිපයක ප්‍රතිඵල අතිශය පුදුම සහගත බව පෙනී යන අතර ඒ දිස්ත්‍රික්ක වල ඡන්දදායකයන්ගේ සමහර තෝරාගැනීම් අතිශය විපරීත, මතභේදාත්මක බව පෙනේ. මෙකී පුදුම සහගත ප්‍රතිඵල අතරින් වැදගත්ම ප්‍රතිඵලය වන්නේ රත්නපුර දිස්ත්‍රික් මනාප ප්‍රතිඵලයයි. රත්නපුර දිස්ත්‍රික් මනාප ලැයිස්තුවේ දෙවැනියා මේ වන විට අධිකරණ ක්‍රියාවලියක් ඔස්සේ මිනීමැරුම් චෝදනාවකට වරදකරු වී මරණ දඬුවමට යටත්ව බන්ධනාගාරගත කර සිටින අයෙක් වීම මෙකී අතිශය විපරීත සිද්ධියයි.</p>

<p>මේ හා සම්බන්ධව විශ්ලේෂණාත්මකව කල්පනා කර බලන කල, මට පෙනෙන හැටියට මෙහි ඉතාම බරපතල කාරණා දෙකක් මම හඳුනා ගනිමි. මූලික වශයෙන් මෙම චූදිතයා වරදකරු වන්නේ 2015 ජනවාරියේ පැවති ජනාධිපතිවරණ ප්‍රචාරක සමයේ සිදුකල වෙඩිතැබීමක් හේතුවෙන් සිදුවූ මනුෂ්‍ය ඝාතනයකටය. මරණ දඬුවම පිළිබඳ තීන්දුව ලැබුණු 2020 ජූලි 31 වන විට මේ සිද්ධිය වසර 4කුත් මාස 10කටත් වඩා පැරණි සිද්ධියකි. මෙවර මැතිවරණය සඳහා නාම යෝජනා භාරදීමට ලබා දී තිබූ අවසන් දිනය වන 2020 මාර්තු 18 වන විටත් ඉහත කී සිද්ධිය වසර 4කටත් වඩා පැරණිය. මට හිතෙන හැටියට නම් නාම යෝජනා භාරදෙන කාල වකවානුව වන විට මේ නඩු කටයුත්තේ අවසානය පිළිබඳ කිසියම් ඉඟියක්, අදහසක් මේ සියළු දෙනාටම නොතිබුණේ යැයි සිතීම විහිළුවකි. මේ පුද්ගලයා මැතිවරණයට ඉදිරිපත් වූ පක්ෂයේ නාම යෝජනා පිළිබඳ වගකිවයුතු නායක කාරකාදීන් හට අඩුම වශයෙන් “බොලේ! නිකං හරි මේ මිනිහට මරණ දඬුවම හම්බුනොත් මොකද වෙන්නෙ?” යන්න සලකා බැලිය යුතුව තිබුණු බව ඉතාම පැහැදිලිය. නමුත්, කුමක් හෝ කාරණාවක් නිසා එය එසේ නොවුණි. එක්කෝ එකී නායක කාරකාදීන්ට එය අමතක වූවා විය යුතුය. එක්කෝ ඔවුන් එක නොසලකා හැරියා විය යුතුය. මේ දෙකම නැතිනම් ඔවුන් එය හිතාමතාම සිදු කලා විය යුතුය. මේවායෙන් කොයි එක වෙතත්, එය ඉතාම බරපතල තත්වයක් බව නොකිවමනාය.</p>

<p>දෙවැන්න, මොහුට මනාපව කතිරය ගැසූ රත්නපුර දිස්ත්‍රික් ඡන්දදායකයන් පිළිබඳවය. “බෙල්ලට මූට්ටු වෙලා ඔළුවක් තිබ්බට, ඒක අස්සෙ මොළයක් තිබ්බට මිනිහෙක් බුද්ධිමතෙක් වෙන්නෙ නෑ” යන කාරණාව සාධනය කිරීමට රත්නපුර ඡන්දදායකයන් තරම් හොඳ උදාහරණයක් සොයාගත නොහැකි තරම්ය. “දෙයිහාන්දුරුවනේ, මේ මිනිහා මිනී මරලා අච්චු කරපු එකෙක්. මම මූට ඡන්දෙ දීලා පාර්ලිමේන්තු යවලා හරියාවියෑ!” යන ඉතාම සරල කාරණාව කල්පනා කර බලන්නට තරම් ඔවුන්ගේ බුද්ධිය වර්ධනය වී නොතිබීම ගැන මම ඉතාම කණගාටු වෙමි. “ගින්නක් නැතිව දුමක් කොයින්ද” යන්න පැරණි ආප්තෝපදේශයකි. එය ඒ හැටිම සත්‍ය නොවුනත්, අඩුම තරමින් 95%ක් වත් දුම් වලට ගින්නක් හේතුවන බව අපි අත්දැකීමෙන් දනිමු. එසේ දැන දැනත්, දුමක් නගින තැනක, දුම නොසලකා හරිමින් පෙට්‍රල් වත් කරන්නට යාම කොතරම් අනුවණ සහගත දැයි නොකිවමනාය. “හරි! කවුද දන්නෙ රත්නපුර උසාවියෙන් එයාට අනිවාරතේ අච්චු කලාද කියලා? මිනිහා ඇත්තටම වරදක් නොකලා නම්?” යන තර්කය යමෙකුට ගෙන ආ හැක. තත්වය එසේ නම්, අප මුලින්ම කලයුත්තේ අපේ අධිකරණ පද්ධතිය නිවැරදි කිරීමය. තත්වය එසේ නම් මේ රට මේවන විටත් ඉතාම බරපතල අඩියකට වැටී ඇති බැව් නොකිවමනාය. ඒ හැරත්, ඔබ ඝන වනාන්තරයක අතරමංව කුසගින්නේ සිටින අවස්ථාවක් ගැන කල්පනා කර බලන්න. රතු පැහැහෙන් දිලෙන නොහඳුනන ඵලයක් දකින ඔබ, ඒ ඵලය විෂක්දැයි අල්ප මාත්‍ර හෝ සැකයක් ඇත්නම් ඔබ එය අනුභව කරනවාද? ඔබේ පිළිතුර “තමුසෙට පිස්සුද ඕයි?” වැන්නක් බව මට උදක්ම විශ්වාස ය.  මින් පෙර මැතිවරණයක වැඩිම උගතුන් සිටිත් යැයි කියූ සියනෑ කෝරලයෙන්, “ව්‍යවස්ථාව” “ප්‍රජාතන්ත්‍රවාදය” යන වචන හරි හැටි උච්ඡාරණය කිරීමටවත් නොහැකි නලඟනක් වැඩිම මනාපයෙන් පාර්ලිමේන්තුවට යැවූ බැව් මට මේ මොහොතේ සිහියට නැගේ. රුවන්පුර ඈයන් සියනෑ කෝරල වාසීන්ට නොදෙවෙනි හපන්කමක් මෙවර කල බව ඉතාම කණගාටුවෙන් වුවත් සඳහන් කල යුතුමය. සිරිලක් අම්මාගේ කුමක් හෝ අවාසනාවකට, ඇගේ සමහර දරුවන් හට කොයි තරම් මොළය තිබුණත්, ඔවුන් එය පාවිච්චි කරන අන්දම ඉතාම කණගාටුදායක ය.</p>

<p>නියෝජිත ප්‍රජාතන්ත්‍රවාදය යනු ඉතාම බලසම්පන්න පරිපාලන රාමුවකි. ඒ ගැන තර්ක දෙකක් නැත. නමුත් එහි සාර්ථකත්වයට බලපාන ප්‍රධානම කාරණය වනුයේ නියෝජිතයන් තෝරා පත්කර ගැනීමට සිය ඡන්දය භාවිත කරන මහජනතාවගේ හැසිරීමය. දයාබර ඡන්දදායකයිනි, කරුණාකර ඔබේ ඔළුව ඇත්තේ අලංකාරය උදෙසා තොප්පි දැමීමට හෝ කොණ්ඩා මෝස්තර දැමීමට පමණක් නොව, එතුල ඇති මොළය අවශ්‍ය අවස්ථාවන් හිදී පාවිච්චි කිරීම සඳහාද බව වටහා ගන්න. එය අවශ්‍ය විට පාවිච්චි කිරීමට පසුබට නොවීමටද වගබලා ගන්න. ඔබ ඔබේ ඔළුව හරි හැටි පාවිච්චි කරන තාක්, ප්‍රජාතන්ත්‍රයේ ප්‍රබලතම සාධකය වන සර්වජන ඡන්ද බලය සබුද්ධිකව, සවිඥානිකව භාවිතා කරන තාක්, <strong>ප්‍රජාතන්ත්‍රය පජාත වී යාම</strong> වැලැක්විය නොහැකිබවත් තරයේ වටහා ගන්න.</p>]]></content><author><name></name></author><category term="mage_weyikkiya" /><summary type="html"><![CDATA[මේ පශ්චාත් මැතිවරණ සමයයි. අමුතු ආකාරයේ නාඩගම් කල එලි බසින කාලයයි. බලය තහවුරු කරගත්තෝ බලය අහිමිවූවන්ට කෝචෝක් දමමින්, කට මැත දොඩවමින් සිය පාක්ෂිකයන් හමුවට ගොස් පාරේ රතිඤ්ඤා දල්වමින්, කිරිබත් කැවුම් කමින් ඩෙඟා නටති. බලය අහිමිවූවෝ එක්කෝ "අපිට ප්‍රතිසංවිධානය වෙන්න තියෙනවා" කියා ජනමාධ්‍ය ඉදිරියේ "පොඩි ලයින් එකක් දී" තමුන්ගේ ගුලට රිංගා ගනිති. එසේත් නැතිනම් එක පිට එක මාධ්‍ය සාකච්ඡා කැඳවමින් "අපි මේ ප්‍රතිඵලය ගැන සෑහීමකට පත්වෙන්නෙ නෑ. ඡන්දෙ දාපු මිනිස්සු මෝඩයි." ආදී කතා...]]></summary></entry><entry><title type="html">vLayman.1::Branch and Bound Algorithm</title><link href="https://kanchana.senadheera.net/techbits/2020/07/23/bnb-algorithm.html" rel="alternate" type="text/html" title="vLayman.1::Branch and Bound Algorithm" /><published>2020-07-23T14:30:00+00:00</published><updated>2020-07-23T14:30:00+00:00</updated><id>https://kanchana.senadheera.net/techbits/2020/07/23/bnb-algorithm</id><content type="html" xml:base="https://kanchana.senadheera.net/techbits/2020/07/23/bnb-algorithm.html"><![CDATA[<h2 id="prologue">Prologue</h2>

<ul>
  <li>Assume a set of features $ S = {x_1, x_2, \ldots, x_n} $</li>
  <li>Goal is to select a set having $b$ number features from $S$ (i.e. $b \lt n$)</li>
  <li>Power Set of $S$ is given by $ P(S) = {B \mid B \subseteq S} $</li>
  <li>Set of all sets that has $b$ number of elements is given by $\mathcal{A}_b = {C \mid C \subseteq S, n(C)=b}$</li>
</ul>

<h2 id="criterionobjective-function">Criterion(Objective) Function</h2>

<ul>
  <li>This is a function $J$ where $J:P(S) \mapsto (-\infty, \infty)$
    <ul>
      <li>Purpose of $J$ is to attach a value to each element in $P(S)$, so that a decision about each subset of $S$ can be made.</li>
      <li>Example of a $J$ (one of many ways of defining a $J$)
        <ul>
          <li>Consider a set of 5 features (i.e. $n(S) = 5$) and we are to select 2 features (i.e. $b = 5$). We can select ${5 \choose 2} = 10$ different sets having 2 elements.</li>
          <li>For each of these 2 feature sets, infinite number of decision rules can be formulated, out of which we can choose a finite number of decision rules.</li>
          <li>For each of such decision rules, there is a probability of misclassification, and the minimum of these probabilities can be obtained.</li>
          <li>For an arbitrary feature pair $(l,m) \forall l,m \in S$, let’s say the minimum misclassification probability is $P_{min}(l,m)$. This $P_{min}$ can be calculated for each feature pairs.</li>
          <li>Out of all those $P_{min}$ we can find the smallest. The feature pair, corresponding to this smallest value will <strong><em>minimise</em></strong> the probability of misclassification.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>$J$ is to be optimized, i.e
    <ul>
      <li>Find $C_0 \in \mathcal{A}_b$ such that
        <ul>
          <li>$J(C_0) \geq J(C) \forall C \in \mathcal{A}_b$ ~&gt; Maximisation Problem</li>
          <li>$J(C_0) \leq J(C) \forall C \in \mathcal{A}_b$ ~&gt; Minimisation Problem</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h2 id="formulation-of-algorithm">Formulation of Algorithm</h2>

<ul>
  <li>Assume the criterion function $J$, and the target number of features $b$ are given.</li>
  <li>We can perform an exhaustive search to find the optimal subset with the use of $J$.</li>
  <li>But this will quickly become impractical (E.g. consider a feature set having 100 features out of which we are to choose 10. Number of possible choices are ${100 \choose 10} = 1.7310309\times 10^{13})$, which is 1+ trillions)</li>
  <li>However, if $J$ satisfies the property given below, we can formulate an algorithm to find optimal feature subset, without exhaustive search.
    <ul>
      <li>Given $S = {x_1, x_2, \ldots, x_n}$</li>
      <li>$J(A_1) \leq J(A_2)$ when $ A_1 \subseteq A_2 \subseteq S - (1)$</li>
    </ul>
  </li>
  <li>This means <strong><em>more features implies that there is more information</em></strong>. This property is not always useful because, certain features which could act as noise might distort the quality of the feature subset, in terms of its importance.</li>
</ul>

<h3 id="branch-and-bound-algorithm">Branch and Bound Algorithm</h3>

<ul>
  <li>Formulated by P.M. Narendra and K.Fukunaga initially in 1975, this is an algorithm that can be used to derive the optimal feature subset, without exhaustively searching the given space.</li>
  <li>This consists of a tree that is specifically developed under certain constraints.
    <ul>
      <li># of levels $L = n - b + 1$, where $n$ is the number of features in the initial set, and $b$ is the number of elements in the target feature set.</li>
      <li># of branches of a node + # of features to be preserved $= b + 1$
        <ul>
          <li><strong>Features to Preserve</strong>: At each node, the <strong><em>features eliminated by the right-side siblings of each parent</em></strong>, up the hierarchy should be preserved.</li>
        </ul>
      </li>
      <li># of leaf nodes = ${n \choose b}$</li>
      <li>Tree is constructed either <strong>left-to-right</strong>, or <strong>right-to-left</strong>. By the nature, <strong><em>the tree will be asymmetric</em></strong>.</li>
    </ul>
  </li>
</ul>

<h3 id="example">Example</h3>

<ul>
  <li>Assume a feature set $S = {a,b,c,d,e}$, and out of this 3 features to be chosen.</li>
</ul>

<p>Initial parameters $n=5, b=3$</p>

<p>Number of choices ${5 \choose 3} = 10$</p>

<h4 id="steps-of-constructing-the-tree">Steps of constructing the tree:</h4>

<ul>
  <li>Notes:
    <ul>
      <li>-a indicates that feature a is removed from the feature set</li>
      <li>There is a selection criteria $\mathcal{C}$ that selects features to eliminate on each branch, at each node. (This function is discussed later)</li>
    </ul>
  </li>
  <li>For the root node, number of nodes to preserve is 0. Therefore root node will have $b+1$ branches, which is 4.</li>
  <li>If we assume that $\mathcal{C}$ chose $a,b,c$ and $d$ to be removed from the feature set in each branch, we will get a tree like follows.</li>
</ul>

<div class="mermaid">
    graph TD;
        R["*"] --- A["-a"] &amp; B["-b"] &amp; C["-c"] &amp; D["-d"];
</div>

<ul>
  <li>Now, the right most branch should always preserve $a,b$ and $c$. From the formula for #branches, we can calculate it should have only 1 branch. Since $d$ is already taken out, next we have to remove $e$. And we have ${a,b,c}$ as a feature subset.</li>
</ul>

<div class="mermaid">
    graph TD;
        R["*"] --- A["-a"] &amp; B["-b"] &amp; C["-c"] &amp; D["-d"];
        D --- E1["-e"];
        E1 --- ss1["{a,b,c}"];
</div>

<ul>
  <li>The second right-most branch should preserve $a$ and $b$. So, it should have 2 branches. For each of the two branches, let’s say $\mathcal{C}$ choose $d$ and $e$. So, we put each</li>
</ul>

<div class="mermaid">
    graph TD;
        R["*"] --- A1["-a"] &amp; B1["-b"] &amp; C1["-c"] &amp; D1["-d"];
        D1 --- E1["-e"];
        E1 -.- ss1["{a,b,c}"];
        C1 --- E2["-e"] &amp; D2["-d"];
        E2 -.- ss2["{a,b,d}"];
        D2 -.- ss3["{a,b,e}"];
</div>

<ul>
  <li>The third right-most (second left-most) branch from the root, should preserve only $a$, it needs to have 3 branches (from the formula). Assuming that $\mathcal{C}$ chose $c,d$ and $e$,</li>
</ul>

<div class="mermaid">
    graph TD;
        R["*"] --- A1["-a"] &amp; B1["-b"] &amp; C1["-c"] &amp; D1["-d"];
        D1 --- E1["-e"];
        E1 -.- ss1["{a,b,c}"];
        C1 --- D2["-d"] &amp; E2["-e"];
        D2 -.- ss3["{a,b,e}"];
        E2 -.- ss2["{a,b,d}"];
        B1 --- C2["-c"] &amp; D3["-d"] &amp; E3["-e"];
        C2 -.- ss6["{a,d,e}"];;
        D3 -.- ss5["{a,c,e}"];
        E3 -.- ss4["{a,c,d}"]
</div>

<ul>
  <li>Finally for the left most node, #features to preserve is 0. Hence, there should be 4 branches (from the formula). Assuming that $\mathcal{C}$ chose $b,c,d$ and $e$ for those 4 branches,</li>
</ul>

<div class="mermaid">
    graph TD;
        R["*"] --- A1["-a"] &amp; B1["-b"] &amp; C1["-c"] &amp; D1["-d"];
        D1 --- E1["-e"];
        E1 -.- ss1["{a,b,c}"];
        C1 --- D2["-d"] &amp; E2["-e"];
        D2 -.- ss2["{a,b,e}"];
        E2 -.- ss3["{a,b,d}"];
        B1 --- C2["-c"] &amp; D3["-d"] &amp; E3["-e"];
        C2 -.- ss4["{a,d,e}"];;
        D3 -.- ss5["{a,c,e}"];
        E3 -.- ss6["{a,c,d}"];
        A1 --- B2["-b"] &amp; C3["-c"] &amp; D4["-d"] &amp; E4["-e"];
        B2 -.- ss7["{c,d,e}"];
        C3 -.- ss8["{b,d,e}"];
        D4 -.- ss9["{b,c,e}"];
        E4 -.- ss10["{b,c,d}"];
</div>

<p>As it should be obvious by now, this algorithm provides us a way of systematically permuting a feature set, in a way which facilitates reducing the search space to improve search performance.</p>

<h4 id="role-of-j">Role of $J$</h4>

<ul>
  <li>$J$ is the function that provides a bound for each of the nodes.</li>
</ul>

<div class="mermaid">
    graph TD;
        R["Root"] --- L["l"] &amp; M["m"];
        M --- N["n"];
</div>

<ul>
  <li>In the tree, it is evident that each node $n$ is a subset of its parent $m$, which makes it evident that $J(n) \leq J(m)$.</li>
  <li>Given $n$ is a leaf node, if there is a sibling $l$ of node $m$, that which $J(l) \leq J(n)$, <strong><em>it is guaranteed that all of $l$’children will yield values for $J$, which are less than $J(n)$</em></strong>. Here $J(l)$ acts as a <strong><em>lower bound</em></strong> for $J(o)$ (hence the name <strong><em>bound</em></strong>).</li>
  <li>So, we can conclude that the node $n$ is the node that has the optimal subset of features.</li>
</ul>]]></content><author><name></name></author><category term="techbits" /><summary type="html"><![CDATA[Prologue]]></summary></entry><entry><title type="html">#::3-Generics</title><link href="https://kanchana.senadheera.net/techbits/2020/03/27/hash-3-generics.html" rel="alternate" type="text/html" title="#::3-Generics" /><published>2020-03-27T10:12:18+00:00</published><updated>2020-03-27T10:12:18+00:00</updated><id>https://kanchana.senadheera.net/techbits/2020/03/27/hash-3-generics</id><content type="html" xml:base="https://kanchana.senadheera.net/techbits/2020/03/27/hash-3-generics.html"><![CDATA[<p>Some time back, I wrote about stacks and how to implement them. There, I have promised at the end that I will improve our current implementation using generics. This, I write to keep that promise. The initial part of this, I am going to discuss some technical aspects related to generics in C# and Java. For those who are less interested in that part, you can <a href="#impl">jump into the implementation</a> straight away. Let’s get started. First of all, I am going to take a look at a simple method <code class="language-plaintext highlighter-rouge">void Swap()</code> that is used to swap two references.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">Swap</span><span class="p">(</span><span class="n">Integer</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">Integer</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Integer</span> <span class="n">tmp</span> <span class="p">=</span> <span class="n">lhs</span><span class="p">;</span>
    <span class="n">lhs</span> <span class="p">=</span> <span class="n">rhs</span><span class="p">;</span>
    <span class="n">rhs</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>All about this method looks fine except that it can Swap only integer object references. That simply tells us that if we have other types of objects (for instance say <code class="language-plaintext highlighter-rouge">Float</code>), you will need other methods to be implemented with almost similar body, and blatantly violate one of the key principles of coding practices DRY (AKA Don’t Repeat Yourself) and end up having to do Shotgun Surgery. DUH! Can we really improve this to have only one implementation that is reusable across different types? Just look at the three implementations of <code class="language-plaintext highlighter-rouge">Swap()</code> method given below for <code class="language-plaintext highlighter-rouge">Integer</code>, <code class="language-plaintext highlighter-rouge">Person</code> and <code class="language-plaintext highlighter-rouge">Car</code>.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Utility</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">Swap</span><span class="p">(</span><span class="n">Integer</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">Integer</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Integer</span> <span class="n">tmp</span> <span class="p">=</span> <span class="n">lhs</span><span class="p">;</span>
        <span class="n">lhs</span> <span class="p">=</span> <span class="n">rhs</span><span class="p">;</span>
        <span class="n">rhs</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">void</span> <span class="nf">Swap</span><span class="p">(</span><span class="n">Person</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">Person</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Person</span> <span class="n">tmp</span> <span class="p">=</span> <span class="n">lhs</span><span class="p">;</span>
        <span class="n">lhs</span> <span class="p">=</span> <span class="n">rhs</span><span class="p">;</span>
        <span class="n">rhs</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">void</span> <span class="nf">Swap</span><span class="p">(</span><span class="n">Car</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">Car</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Car</span> <span class="n">tmp</span> <span class="p">=</span> <span class="n">lhs</span><span class="p">;</span>
        <span class="n">lhs</span> <span class="p">=</span> <span class="n">rhs</span><span class="p">;</span>
        <span class="n">rhs</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The obvious difference in the three methods is the type of the parameters lhs and rhs being passed and the type of the variable tmp. That is where Generics come into play. Generics is a notation/syntactical component of most programming languages, that allows developers to specify the type parameters. In C#, we could easily rewrite the methods given above in to follows.</p>

<h2 id="generic-methods">Generic Methods</h2>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Utility</span> <span class="p">{</span>
    <span class="k">void</span> <span class="n">Swap</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="n">lhs</span><span class="p">,</span> <span class="n">T</span> <span class="n">rhs</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">T</span> <span class="n">tmp</span> <span class="p">=</span> <span class="n">lhs</span><span class="p">;</span>
        <span class="n">lhs</span> <span class="p">=</span> <span class="n">rhs</span><span class="p">;</span>
        <span class="n">rhs</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here, <code class="language-plaintext highlighter-rouge">&lt;T&gt;</code> is the syntactical nuance that enables specifying type annotations. <code class="language-plaintext highlighter-rouge">T</code> acts just as a variable and allows a level of abstraction, which enables better reuse of code. In other words, if (god forbid) the logic of swapping happened to change over time, we will have to go and stitch only one bleeding wound except for multiple. That makes our code much much easier to maintain. When this method is invoked during runtime, different things happen under the hood, depending on the language under consideration. For the case of C#, the translated result into Intermediate Language (IL) would look something like follows. (thanks to https://sharplab.io for the output)</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">.</span><span class="k">class</span> <span class="nc">private</span> <span class="n">auto</span> <span class="n">ansi</span> <span class="err">'</span><span class="p">&lt;</span><span class="n">Module</span><span class="p">&gt;</span><span class="err">'</span>
<span class="p">{</span>
<span class="p">}</span> <span class="c1">// end of class &lt;Module&gt;</span>
<span class="p">.</span><span class="k">class</span> <span class="nc">private</span> <span class="n">auto</span> <span class="n">ansi</span> <span class="n">beforefieldinit</span> <span class="n">Utility</span>
    <span class="n">extends</span> <span class="p">[</span><span class="n">System</span><span class="p">.</span><span class="n">Private</span><span class="p">.</span><span class="n">CoreLib</span><span class="p">]</span><span class="n">System</span><span class="p">.</span><span class="n">Object</span>
<span class="p">{</span>
    <span class="c1">// Methods</span>
    <span class="p">.</span><span class="n">method</span> <span class="k">private</span> <span class="n">hidebysig</span> 
        <span class="n">instance</span> <span class="k">void</span> <span class="n">Swap</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">(</span>
            <span class="p">!!</span><span class="n">T</span> <span class="n">lhs</span><span class="p">,</span>
            <span class="p">!!</span><span class="n">T</span> <span class="n">rhs</span>
        <span class="p">)</span> <span class="n">cil</span> <span class="n">managed</span> 
    <span class="p">{</span>
        <span class="c1">// Method begins at RVA 0x2050</span>
        <span class="c1">// Code size 10 (0xa)</span>
        <span class="p">.</span><span class="n">maxstack</span> <span class="m">1</span>
        <span class="p">.</span><span class="n">locals</span> <span class="nf">init</span> <span class="p">(</span>
            <span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">!!</span><span class="n">T</span>
        <span class="p">)</span>
        <span class="n">IL_0000</span><span class="p">:</span> <span class="n">nop</span>
        <span class="n">IL_0001</span><span class="p">:</span> <span class="n">ldarg</span><span class="p">.</span><span class="m">1</span>
        <span class="n">IL_0002</span><span class="p">:</span> <span class="n">stloc</span><span class="p">.</span><span class="m">0</span>
        <span class="n">IL_0003</span><span class="p">:</span> <span class="n">ldarg</span><span class="p">.</span><span class="m">2</span>
        <span class="n">IL_0004</span><span class="p">:</span> <span class="n">starg</span><span class="p">.</span><span class="n">s</span> <span class="n">lhs</span>
        <span class="n">IL_0006</span><span class="p">:</span> <span class="n">ldloc</span><span class="p">.</span><span class="m">0</span>
        <span class="n">IL_0007</span><span class="p">:</span> <span class="n">starg</span><span class="p">.</span><span class="n">s</span> <span class="n">rhs</span>
        <span class="n">IL_0009</span><span class="p">:</span> <span class="n">ret</span>
    <span class="p">}</span> <span class="c1">// end of method Utility::Swap</span>
    <span class="p">.</span><span class="n">method</span> <span class="k">public</span> <span class="n">hidebysig</span> <span class="n">specialname</span> <span class="n">rtspecialname</span> 
        <span class="n">instance</span> <span class="k">void</span> <span class="p">.</span><span class="nf">ctor</span> <span class="p">()</span> <span class="n">cil</span> <span class="n">managed</span> 
    <span class="p">{</span>
        <span class="c1">// Method begins at RVA 0x2066</span>
        <span class="c1">// Code size 8 (0x8)</span>
        <span class="p">.</span><span class="n">maxstack</span> <span class="m">8</span>
        <span class="n">IL_0000</span><span class="p">:</span> <span class="n">ldarg</span><span class="p">.</span><span class="m">0</span>
        <span class="n">IL_0001</span><span class="p">:</span> <span class="n">call</span> <span class="n">instance</span> <span class="k">void</span> <span class="p">[</span><span class="n">System</span><span class="p">.</span><span class="n">Private</span><span class="p">.</span><span class="n">CoreLib</span><span class="p">]</span><span class="n">System</span><span class="p">.</span><span class="n">Object</span><span class="p">::.</span><span class="nf">ctor</span><span class="p">()</span>
        <span class="n">IL_0006</span><span class="p">:</span> <span class="n">nop</span>
        <span class="n">IL_0007</span><span class="p">:</span> <span class="n">ret</span>
    <span class="p">}</span> <span class="c1">// end of method Utility::.ctor</span>
<span class="p">}</span> <span class="c1">// end of class Utility</span>
</code></pre></div></div>

<p>As it is clearly visible, we don’t see much difference in the IL code also, with regard to generics. So, as we can obviously conclude, the thing happens during the runtime. The .NET Common Language Runtime (CLR) will generate object code, with overrides for each invocation with different types, of our swap method, as if we wrote our C# code like in the first code snippet. In other words, in runtime, each different specialization of the method is treated as a different method of the same class. This same example written in Java would look quite close to identical. You already know that syntactical rules are very much similar in C# and Java. So, the almost identical looks should not be suprising.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Utility</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">swap</span><span class="o">(</span><span class="no">T</span> <span class="n">lhs</span><span class="o">,</span> <span class="no">T</span> <span class="n">rhs</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">T</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">lhs</span><span class="o">;</span>
        <span class="n">lhs</span> <span class="o">=</span> <span class="n">rhs</span><span class="o">;</span>
        <span class="n">rhs</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Unlike the .NET CLR, Java Runtime Environment (JRE) takes a different avenue in handling generics. It does something called type erasure. Even though the type parameters are specified in the code, all of them will be erased during the compile time. Generally, type erasure will replace the references to the type parameter <code class="language-plaintext highlighter-rouge">T</code> with Object for <code class="language-plaintext highlighter-rouge">T</code> is not bound. <code class="language-plaintext highlighter-rouge">T</code> will be replaced with the upper bound type. Further details and edge cases are discussed below.</p>

<h2 id="generic-classes">Generic Classes</h2>

<p>When you have a generic class instantiated, the runtime will generate a specialized version of the said class with the specific parameters. How it is done exactly, varies on whether the type parameters are value type or reference type. No matter what, the compiler will only generate a single generic type into the assembly. During the runtime, a separate set of static fields will be allocated for each type parameter of the generic class. How many different versions of the generic class will be generated depends on whether the type parameters are value type or reference type where,</p>

<ul>
  <li>for each value type parameter invocation, there will be a dedicated version of the generic class</li>
  <li>all reference type parameter invocations will share the same version of the generic class (because the reference types have the same size)</li>
</ul>

<p>In other words, a class <code class="language-plaintext highlighter-rouge">Sample&lt;T&gt;</code>, initialized as follows would cause in having three different versions during the runtime.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Sample</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sample</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;();</span>
<span class="nc">Sample</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sample</span><span class="o">&lt;</span><span class="kt">float</span><span class="o">&gt;();</span>
<span class="nc">Sample</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">s1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Sample</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;();</span>
</code></pre></div></div>

<h2 id="type-constraints-in-c">Type Constraints in C#</h2>

<p>Constraining is about limiting the possible values that each type parameter could take during the runtime. For an instance, a method <code class="language-plaintext highlighter-rouge">void Swap&lt;T&gt;()</code> can have any type for the parameter <code class="language-plaintext highlighter-rouge">T</code>. If we need to restrict this, we could do it like <code class="language-plaintext highlighter-rouge">void Swap&lt;T&gt;() where T : Person</code>. Now, <code class="language-plaintext highlighter-rouge">T</code> can’t be just anything. It should be anything that extends <code class="language-plaintext highlighter-rouge">Person</code>. Otherwise it will cause errors during compile time. In fact, these constraints could be categorized into four (04) as follows.</p>

<ul>
  <li>Reference Type Constraints – Restricts the type arguments to be only reference types. In the example below, the 3rd line will cause in The type <code class="language-plaintext highlighter-rouge">'int' must be a reference type in order to use it as parameter 'T' in the generic type or method 'Sample&lt;T&gt;'</code> during compile time.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Sample</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span> <span class="err">{}</span>

<span class="nc">Sample</span><span class="p">&lt;</span><span class="n">Integer</span><span class="p">&gt;</span> <span class="n">intSample</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">Integer</span><span class="p">&gt;();</span> <span class="c1">// Valid</span>
<span class="n">Sample</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">intSample</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span> <span class="c1">// Invalid</span>
</code></pre></div></div>

<ul>
  <li>Unmanaged Type Constraints – Similar to previous one this time, type arguments only which are of non-nullable <a href="https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/builtin-types/unmanaged-types">unmanaged types</a> are allowed now.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Sample</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">class</span> <span class="err">{}</span>

<span class="nc">Sample</span><span class="p">&lt;</span><span class="n">Integer</span><span class="p">&gt;</span> <span class="n">intSample</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">Integer</span><span class="p">&gt;();</span> <span class="c1">// Invalid</span>
<span class="n">Sample</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">intSample</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span> <span class="c1">// Valid</span>
</code></pre></div></div>

<ul>
  <li>Constructor Type Constraints – This will check if the given type parameter <code class="language-plaintext highlighter-rouge">T</code> has a parameter-less default constructor, for each <code class="language-plaintext highlighter-rouge">T</code> is any non-static, non-abstract class without any explicitly declared constructors and for any non-abstract class with an explicit public parameter-less constructor. This should be the  last constraint defined for a generic type. Below, line number 7 will cause in <code class="language-plaintext highlighter-rouge">'string' must be a non-abstract type with a public parameterless constructor in order to use it as parameter </code>T<code class="language-plaintext highlighter-rouge"> in the generic type or method 'Program.CreateInstance&lt;T&gt;()'</code> during compile time.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="n">T</span> <span class="n">CreateInstance</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="k">new</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">T</span><span class="p">();</span>
<span class="p">}</span>
<span class="kt">int</span> <span class="n">newInt</span> <span class="p">=</span>  <span class="n">CreateInstance</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span>      <span class="c1">//(5) Valid</span>
<span class="kt">object</span> <span class="n">newObj</span> <span class="p">=</span> <span class="n">CreateInstance</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;();</span> <span class="c1">//(6) Valid</span>
<span class="kt">string</span> <span class="n">newStr</span> <span class="p">=</span> <span class="n">CreateInstance</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span> <span class="c1">//(7) Invalid: string DOES NOT have parameter-less public constructor</span>
</code></pre></div></div>

<ul>
  <li>Conversion Type Constraints – This is the most complex form of constraints. The conversion can be done based on identity, reference and boxing. To clarify this a bit, let’s consider the below example.</li>
</ul>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">A</span><span class="p">&gt;</span> <span class="n">s1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">A</span><span class="p">&gt;();</span>          <span class="c1">// ---(1.1)</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">C</span><span class="p">&gt;</span> <span class="n">s2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">C</span><span class="p">&gt;();</span>          <span class="c1">// ---(1.2)</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IComparable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>Lines highlighted with comment 1.x in the above provides examples of  of boxing conversion. 1.1 above is valid because the class Sample expects a type parameter <code class="language-plaintext highlighter-rouge">T</code> that implements the interface <code class="language-plaintext highlighter-rouge">System.IComparable&lt;T&gt;</code> and the type parameter is int which is boxed into the struct <code class="language-plaintext highlighter-rouge">System.Int32</code>, that implements <code class="language-plaintext highlighter-rouge">IComparable&lt;Int32&gt;</code>.  This is because of the nature of the CLR on how it handles boxing. According to the doc on Boxing and Unboxing, <strong>Boxing is the process of converting a value type to the type object <u>or to any interface type implemented by this value type</u></strong>. The underlined latter part of the sentence clears it off.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">B</span><span class="p">&gt;</span> <span class="n">s1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">B</span><span class="p">&gt;();</span>          <span class="c1">// ---(2.1)</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">C</span><span class="p">&gt;</span> <span class="n">s2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">C</span><span class="p">&gt;();</span>          <span class="c1">// ---(2.2)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">IX</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IX</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IX</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">A</span> <span class="p">:</span> <span class="n">IX</span><span class="p">&lt;</span><span class="n">A</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">B</span> <span class="p">:</span> <span class="n">A</span><span class="p">,</span> <span class="n">IX</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">C</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>Now, class <code class="language-plaintext highlighter-rouge">Sample</code> expects a type parameter which is of type <code class="language-plaintext highlighter-rouge">IX</code>. This form of conversion is called reference type conversion. <code class="language-plaintext highlighter-rouge">B</code> implements the interface <code class="language-plaintext highlighter-rouge">IX</code> and hence 2.1 will be valid, while 2.2 will cause a compile time error because, <code class="language-plaintext highlighter-rouge">C</code> does not implement <code class="language-plaintext highlighter-rouge">IX</code>.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">A</span><span class="p">&gt;</span> <span class="n">s1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">A</span><span class="p">&gt;();</span>          <span class="c1">// ---(3.1)</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">B</span><span class="p">&gt;</span> <span class="n">s2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">B</span><span class="p">&gt;();</span>          <span class="c1">// ---(3.2)</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">C</span><span class="p">&gt;</span> <span class="n">s3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">C</span><span class="p">&gt;();</span>          <span class="c1">// ---(3.3)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">A</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IX</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IX</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">A</span> <span class="p">:</span> <span class="n">IX</span><span class="p">&lt;</span><span class="n">A</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">B</span> <span class="p">:</span> <span class="n">A</span><span class="p">,</span> <span class="n">IX</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">C</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>Lines highlighted with 3.x are examples for identity conversions. 3.1 and 3.2 are valid because the class <code class="language-plaintext highlighter-rouge">Sample</code> expects a type parameter which is of type <code class="language-plaintext highlighter-rouge">A</code>. 3.2 has <code class="language-plaintext highlighter-rouge">B</code> passed as a type arg, which extends <code class="language-plaintext highlighter-rouge">A</code>. 3.3 on the other hand is invalid because <code class="language-plaintext highlighter-rouge">C</code> does not belong to <code class="language-plaintext highlighter-rouge">A</code> in the inheritance hierarchy.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">B</span><span class="p">,</span> <span class="n">A</span><span class="p">&gt;</span> <span class="n">s1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">B</span><span class="p">,</span> <span class="n">A</span><span class="p">&gt;();</span>    <span class="c1">// ---(4.1)</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">B</span><span class="p">,</span> <span class="n">IX</span><span class="p">&gt;</span> <span class="n">s2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">B</span><span class="p">,</span> <span class="n">IX</span><span class="p">&gt;();</span>  <span class="c1">// ---(4.2)</span>
        <span class="n">Sample</span><span class="p">&lt;</span><span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="p">&gt;</span> <span class="n">s3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Sample</span><span class="p">&lt;</span><span class="n">C</span><span class="p">,</span> <span class="n">A</span><span class="p">&gt;();</span>    <span class="c1">// ---(4.3)</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Sample</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="n">U</span><span class="p">&gt;</span> <span class="k">where</span> <span class="n">T</span> <span class="p">:</span> <span class="n">U</span> <span class="p">{}</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IX</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IX</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">A</span> <span class="p">:</span> <span class="n">IX</span><span class="p">&lt;</span><span class="n">A</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">B</span> <span class="p">:</span> <span class="n">A</span><span class="p">,</span> <span class="n">IX</span> <span class="p">{</span> <span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">C</span> <span class="p">{</span> <span class="p">}</span>
</code></pre></div></div>

<p>Lines highlighted with comments 4.x are a special case of reference conversion. As you can see the class Sample now has two type args <code class="language-plaintext highlighter-rouge">T</code> and <code class="language-plaintext highlighter-rouge">U</code> where, <code class="language-plaintext highlighter-rouge">T</code> should extend <code class="language-plaintext highlighter-rouge">U</code>. In other words, whatever the type parameter passed for <code class="language-plaintext highlighter-rouge">T</code> should either be a subclass of, or implement <code class="language-plaintext highlighter-rouge">U</code>. In that sense, both 4.1 and 4.2 will be valid and 4.3 will cause compile time error because <code class="language-plaintext highlighter-rouge">C</code> neither extends nor implements <code class="language-plaintext highlighter-rouge">A</code> in their inheritance hierarchy.</p>

<h2 id="bound-type-parameters-in-java">Bound Type Parameters in Java</h2>

<p>Similar to constraints in C#, Java has Bound Type parameters. Consider a simple class hierarchy in Java as <code class="language-plaintext highlighter-rouge">Object</code> :&gt; <code class="language-plaintext highlighter-rouge">Alpha</code> :&gt; <code class="language-plaintext highlighter-rouge">Bravo</code> :&gt; <code class="language-plaintext highlighter-rouge">Charlie</code>. Now when we define type args for a method <code class="language-plaintext highlighter-rouge">&lt;T&gt; void do(T t)</code>, we can alter the signature of the method as <code class="language-plaintext highlighter-rouge">&lt;T extends Alpha&gt;</code> which will restrict the assignable types to the parameter to only of type Alpha or anything that inherits from Alpha. This will result the compiler to perform type erasure and replace all occurrences that refer to type arg <code class="language-plaintext highlighter-rouge">T</code>, with <code class="language-plaintext highlighter-rouge">Alpha</code>. In fact <code class="language-plaintext highlighter-rouge">&lt;T extends A&gt;</code> is identical to<code class="language-plaintext highlighter-rouge"> &lt;T&gt;</code>. But this is quite handy, when we use this with interfaces, as it will enable an upper bound which is not restricted to a particular sub tree in the object hierarchy. Upon type erasure, <code class="language-plaintext highlighter-rouge">&lt;T extends IAlpha&gt; void do(T t)</code> will result in <code class="language-plaintext highlighter-rouge">void do(IAlpha t)</code>, where <code class="language-plaintext highlighter-rouge">IAlpha</code> is an interface.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Source</span>
<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">IAlpha</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">do</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>

<span class="c1">// Results in follows</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">do</span><span class="o">(</span><span class="nc">IAlpha</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</code></pre></div></div>

<p>As previously mentioned, Java compiler performs type erasure by replacing the generic methods with a signature where the bounded type parameters will be replaced with upper bound. “Okay, so what about lower bound?” is a nice counter question, which I believe will be answered with something like “that’s a useful feature which is not useful enough to be implemented in Java core”. That’s why when you try public <code class="language-plaintext highlighter-rouge">&lt;T super String&gt; void swap(T lhs, T rhs)</code>, it will end up in a compile time error. Java also allows specifying multiple bounds, under the same restrictions for class declaration. There can be any number of bounds with at most one class as a bound.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">String</span> <span class="o">&amp;</span> <span class="nc">Serializable</span> <span class="o">&amp;</span> <span class="nc">Iterable</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">do</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span> <span class="c1">// Valid</span>
<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">String</span> <span class="o">&amp;</span> <span class="nc">Integer</span> <span class="o">&amp;</span> <span class="nc">Iterable</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">do</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span> <span class="c1">// Invalid: Muliple class bounds</span>
</code></pre></div></div>

<p>When there are multiple bounds as such, Java compiler will internally refactor the source with synthetic methods (so called because generated automatically based on the existing methods) to have overrides of the method for each bound. These methods are called bridge methods.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Source</span>
<span class="kd">public</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">String</span> <span class="o">&amp;</span> <span class="nc">Serializable</span> <span class="o">&amp;</span> <span class="nc">Iterable</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="nf">do</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>

<span class="c1">// Results in follows</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">do</span><span class="o">(</span><span class="nc">String</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">do</span><span class="o">(</span><span class="nc">Serializable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">do</span><span class="o">(</span><span class="nc">Iterable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
</code></pre></div></div>

<h2 id="type-inference-in-generics--c">Type Inference in Generics – C#</h2>

<p>In layman terms, this is how the runtime determines the actual type for a given type parameter, in invocations where the actual types for the parameters are not explicitly mentioned/specified. This is specifically essential in generic methods. In C#, the only source for inferring types is the arguments list of a method. Neither the left hand side of an assignment, nor the type constraints will provide sources to infer the types. The rules are actually quite complicated and even the spec has got them wrong in multiple places (at least according to Jon Skeet as mentioned by himself in <a href="https://stackoverflow.com/a/479983">this answer to a question in Stack Overflow</a>).</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Implementation</span>
<span class="n">T</span> <span class="n">Work</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="n">t</span><span class="p">){</span>
    <span class="c1">// Body</span>
    <span class="k">return</span> <span class="n">t</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// Invocation</span>
<span class="kt">int</span> <span class="n">a</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
<span class="nf">Work</span><span class="p">(</span><span class="n">a</span><span class="p">);</span>
<span class="n">Person</span> <span class="n">p</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">();</span>
<span class="nf">Work</span><span class="p">(</span><span class="n">p</span><span class="p">);</span>
</code></pre></div></div>

<p>Here, the runtime can easily and obviously determine the type of of the parameter a. For the case where we pass an int as a parameter to method Work, the runtime can determine the method will return an int. So, There will be strict type enforcement even if different invocations of method Work are there. This gives us a form of a polymorphic behaviour.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">static</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">CreateList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
<span class="p">}</span>

<span class="n">LinkedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">intList</span> <span class="p">=</span> <span class="nf">CreateList</span><span class="p">();</span>      <span class="c1">// ---(1)</span>
<span class="n">LinkedList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">intList</span> <span class="p">=</span> <span class="n">CreateList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;();</span> <span class="c1">// ---(2)</span>
</code></pre></div></div>

<p>However, the line, highlighted with the comment 1 above, will cause a compile tile error. This is a case where the C# runtime won’t be able to infer the type. If the method call is added with explicit type arguments (line with comment 2) the problem will be resolved.</p>

<h2 id="type-inference-in-generics--java">Type Inference in Generics – Java</h2>

<p>Java also capable of determining the types based on method arguments. Also, there is diamond operator <code class="language-plaintext highlighter-rouge">&lt;&gt;</code> available from Java 7 onward. This allows JRE to determine the type by inference. So, Java is perfectly capable of the following.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Declaration</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Alpha</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">make</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nc">Alpha</span><span class="o">&lt;&gt;();</span> <span class="c1">// Inference</span>
<span class="o">}</span>

<span class="c1">// Invocation</span>
<span class="nc">Alpha</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">alpha</span> <span class="o">=</span> <span class="n">make</span><span class="o">();</span>
<span class="nc">But</span> <span class="n">the</span> <span class="n">following</span><span class="o">,</span> <span class="n">where</span> <span class="n">it</span> <span class="n">attempts</span> <span class="n">to</span> <span class="n">deserialize</span> <span class="n">a</span> <span class="no">JSON</span> <span class="n">string</span> <span class="n">into</span> <span class="n">a</span> <span class="n">given</span> <span class="n">type</span> <span class="n">using</span> <span class="nc">ObjectMapper</span> <span class="n">in</span> <span class="nc">Jackson</span> <span class="nc">Databind</span><span class="o">.</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">&gt;</span> <span class="n">cars1</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">jsonArray</span><span class="o">,</span> <span class="k">new</span> <span class="nc">TypeReference</span><span class="o">&lt;&gt;(){});</span> <span class="c1">// Will fail during the runtime</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">&gt;</span> <span class="n">cars1</span> <span class="o">=</span> <span class="n">objectMapper</span><span class="o">.</span><span class="na">readValue</span><span class="o">(</span><span class="n">jsonArray</span><span class="o">,</span> <span class="k">new</span> <span class="nc">TypeReference</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Car</span><span class="o">&gt;&gt;(){});</span> <span class="c1">// Works</span>
</code></pre></div></div>

<p>Even though you might think, “since the end result should be a <code class="language-plaintext highlighter-rouge">List&lt;Car&gt;</code> type argument for <code class="language-plaintext highlighter-rouge">TypeReference&lt;&gt;</code> should be obvious”, it seems like there is no inference channel that the compiler can understand so. Hence, the first method above will fail during the runtime. So the bottom line is, there should be some inference channels that the compiler/runtime is aware of, in order to successfully infer the types for generics.</p>

<h2 id="modified-stack"><a name="impl"></a>Modified Stack</h2>

<p>Previously, our stack supported only int data and now we are trying to make it work with different types. The first thing is to rewrite the IStack interface with generics.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">interface</span> <span class="nc">IStack</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">Push</span><span class="p">(</span><span class="n">T</span> <span class="k">value</span><span class="p">);</span>
    <span class="n">T</span> <span class="nf">Pop</span><span class="p">();</span>
    <span class="n">T</span> <span class="nf">Peek</span><span class="p">();</span>
    <span class="kt">bool</span> <span class="nf">IsFull</span><span class="p">();</span>
    <span class="kt">bool</span> <span class="nf">IsEmpty</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The difference from the previous version is quite simple. All the stack operations are now refactored to work with the type <code class="language-plaintext highlighter-rouge">T</code>, that will be varied in the runtime. Given the interface that provides the contract for stack operations has changed, we need to change its implementation as well. The refactored version will take its shape as follows.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">class</span> <span class="nc">Stack</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IStack</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">private</span> <span class="n">T</span><span class="p">[]</span> <span class="n">array</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">int</span> <span class="n">top</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="nf">Stack</span><span class="p">(</span><span class="kt">int</span> <span class="n">size</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">array</span> <span class="p">=</span> <span class="k">new</span> <span class="n">T</span><span class="p">[</span><span class="n">size</span><span class="p">];</span>
        <span class="n">top</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="p">}</span> 
    
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Push</span><span class="p">(</span><span class="n">T</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nf">IsFull</span><span class="p">())</span> <span class="p">{</span> <span class="c1">//Check if the stack is full</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">SystemException</span><span class="p">(</span><span class="s">"Stack is already full!"</span><span class="p">);</span> <span class="c1">// Will not try to add new items</span>
        <span class="p">}</span>
        <span class="k">this</span><span class="p">.</span><span class="n">array</span><span class="p">[++</span><span class="n">top</span><span class="p">]</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="n">T</span> <span class="nf">Pop</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nf">IsEmpty</span><span class="p">())</span> <span class="p">{</span> <span class="c1">// Check if the stack is empty</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">SystemException</span><span class="p">(</span><span class="s">"Stack is empty!"</span><span class="p">);</span> <span class="c1">// Will not try to remove the top most item from the stack</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="n">top</span><span class="p">--];</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="n">T</span> <span class="nf">Peek</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nf">IsEmpty</span><span class="p">())</span> <span class="p">{</span> <span class="c1">// Check if the stack is empty</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">SystemException</span><span class="p">(</span><span class="s">"Stack is empty!"</span><span class="p">);</span> <span class="c1">// Will not try to get the top most item from the stack</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">array</span><span class="p">[</span><span class="n">top</span><span class="p">];</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsFull</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">array</span><span class="p">.</span><span class="n">Length</span> <span class="p">-</span> <span class="m">1</span><span class="p">)</span> <span class="p">==</span> <span class="k">this</span><span class="p">.</span><span class="n">top</span><span class="p">;</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsEmpty</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">top</span> <span class="p">==</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>As you can see, it is quite straightforward in these sort of cases. All you need to do is</p>

<ul>
  <li>Introduce a type parameter <code class="language-plaintext highlighter-rouge">T</code></li>
  <li>Change all method signatures to work on <code class="language-plaintext highlighter-rouge">T</code>.</li>
</ul>

<p>That’s pretty much it. I hope this has shed some light in the grey areas you had on generics. Happy cording!</p>]]></content><author><name></name></author><category term="techbits" /><summary type="html"><![CDATA[A deep dive into the concept of Generics, and a glance at under the hood of C# and Java, to slightly improve the understanding on how these two implements the concept of Generics.]]></summary></entry><entry><title type="html">Don’t Create Objects That End With -ER? My Two Cents…</title><link href="https://kanchana.senadheera.net/techbits/2020/03/13/dont-create-objects-with-er.html" rel="alternate" type="text/html" title="Don’t Create Objects That End With -ER? My Two Cents…" /><published>2020-03-13T10:12:18+00:00</published><updated>2020-03-13T10:12:18+00:00</updated><id>https://kanchana.senadheera.net/techbits/2020/03/13/dont-create-objects-with-er</id><content type="html" xml:base="https://kanchana.senadheera.net/techbits/2020/03/13/dont-create-objects-with-er.html"><![CDATA[<p><img src="/assets/img/posts/dont-create-objects-with-er/featured.png#center" alt="Scenario 1" /></p>

<p>Well, the beginning of this story goes back to the beginning of August 2019 (not so far eh?). I came across this interesting article <a href="https://www.yegor256.com/2015/03/09/objects-end-with-er.html">Don’t Create Objects That End With -ER</a> , with the title Don’t Create Objects That End With -ER. Ever since I read that, I had a lot of thoughts rumbling in my head that ultimately said: “something in this post doesn’t add up!”. Here I am penning down those thoughts.</p>

<p>At the very beginning, I should mention that this is not any sort of a challenge to the person who wrote that article. From his philosophy of the Object-Oriented Paradigm, he probably should be having many years of experience, which is pacific ocean compared to the jug of water I have with me. This is actually a question. I will end this article with a question mark, hopefully, to revisit and update this with the answers, if and whenever I find them.</p>

<p>There is an interesting pick of an example. In the same words from the article</p>

<p><img src="/assets/img/posts/dont-create-objects-with-er/1.png#center" alt="Scenario 1" /></p>

<p>And, the things that follow this, are what made me having a problem. Let’s take a look at that as well.</p>

<p><img src="/assets/img/posts/dont-create-objects-with-er/2.png#center" alt="Scenario 2" /></p>

<p>Haven’t noticed anything yet? Okay, let’s try to jot down the facts.</p>

<ul>
  <li>Both scenarios are about trying to get the biggest apple.</li>
  <li>In scenario 1, simply sort the apples in the descending order, and get the one at the beginning.</li>
  <li>In scenario 2, it is doing things my(the Sorted’s own) way. In the scenario itself, it is clearly mentioned that instead of sorting all of them, it will go through each apple and find the biggest one and then return it.</li>
</ul>

<p>If we take a look at scenario 2 in an implementation perspective, something is missing there in that given implementation.</p>

<ol>
  <li>It creates an instance of the Sorted object. I don’t have a problem with that. But I have a problem with how the core of the Sorted object is written. To that also, there is a clue given which is “go through them all one by one and find the biggest”. This is nothing but finding maximum in O(n) time isn’t it? (Linear data structure, you can’t finalize the result until you examine the last element)</li>
  <li>Then in the next line, it assigns sorted.get(0) to the biggest.</li>
</ol>

<p>From the way I see it, scenario 2 has at least the following grey areas.</p>

<ol>
  <li>Sorted should know the purpose/final expectation of calling itself. This is evident from the scenario even. (consider the question <strong>Consider them sorted, what do you want to do next?</strong>)</li>
  <li>Based on the answer to that question, the Sorted object decides its next course of actions.</li>
  <li>The business partner now calls itself <strong>Sorted</strong>, which actually does not have anything sorted at all. Simply put, <strong><em>how can you end up with something sorted, without actually sorting</em></strong>? I, being a fan of descriptive identifiers, find this to be a bit disturbing because the name that has been chosen is too close to a lie.</li>
</ol>

<p>In other words, we are talking about intelligent objects, aren’t we? I think yes, we are talking about an intelligent object in scenario 2. Can you think of an implementation of such an object? Wouldn’t that be a god class which is knowing a lot of things, including how to make decisions on what to do in certain cases?</p>

<p>If someone says that this is not about intelligent objects, then someone should know the expectation of this, isn’t it? If the object doesn’t know that, then the obvious another party who should know what the expectation is the developer who writes the code.</p>

<p>All of these I can boil down to the following.</p>

<blockquote>
  <p>Who will ask the question “Consider them sorted, what do you want to do next”?</p>
</blockquote>

<p>Is there anyone who knows the answer? Please feel free to comment. Until next time!</p>]]></content><author><name></name></author><category term="techbits" /><summary type="html"><![CDATA[Classes that ends with 'ER' has been the root for criticisms from many Object Paradigm Purists. One such was found at [Don't Create Objects That End With -ER](https://www.yegor256.com/2015/03/09/objects-end-with-er.html). This is an attempt to pen down some thoughts on this idea of ER.]]></summary></entry><entry><title type="html">#::2-Linked Lists</title><link href="https://kanchana.senadheera.net/techbits/2020/03/07/hash-2-linked-lists.html" rel="alternate" type="text/html" title="#::2-Linked Lists" /><published>2020-03-07T10:12:18+00:00</published><updated>2020-03-07T10:12:18+00:00</updated><id>https://kanchana.senadheera.net/techbits/2020/03/07/hash-2-linked-lists</id><content type="html" xml:base="https://kanchana.senadheera.net/techbits/2020/03/07/hash-2-linked-lists.html"><![CDATA[<p>Let us start this discussion with a simple analogy, that is a story about one of my friends, Alice.</p>

<p>Say I need to meet Charlie, who happens to be someone in possession with a book I need and who is not friends with me. Then, there is Bob, who happens to be friends with Charlie, has a book in his possession, and Bob also knows that he knows someone who is friends with him either have the book I am looking for or knows someone who does so. Finally, there is Alice, who is friends with me, has a book in her possession and also knows that someone who is friends with her either knows or has the book. I, the one who needs the book, also know that someone that I know either. In summary, each person has a book and also friends with at most two people. Clear eh?</p>

<div class="mermaid">
    graph LR;
        I[Me] -- knows --&gt; A[Alice]
        A[Alice] -- knows --&gt; B[Bob];
        B[Bob] -- knows --&gt; Charlie["Charlie (hasBook=true)"];
</div>

<p>Now, in order for me to get my hands on that book I need so badly, I can simply start by going to Alice and ask from her if she has the book. Given that she does not have the book I need and knows only Bob other than me, she could introduce me to Bob. I could do the same with Bob and get introduced to Charlie and find out that Charlie has what I am looking for.</p>

<p>This analogy very closely resembles a LinkedList. A linked list is a data structure that is nothing but a list of elements which are linearly interlinked with the use of references. Each item in the list has at least two (02) properties which are namely,</p>

<ul>
  <li>Data – The data that is held by the element (in the above example the book)</li>
  <li>Next – A memory reference to the next item in the list (in the above example, whereabouts of the other person)</li>
</ul>

<p>This analogy can be easily implemented in the memory of the computer. Let’s look at a simple implementation done in C#.</p>

<p>The first thing to elaborate here is the interface that forms the contract that a class has to abide by, in order to act as a linked list. This interface can provide, but not limited to the signatures for the following operations.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">void addToTail(data)</code> – Item will be added at the end/tail of the list.</li>
  <li><code class="language-plaintext highlighter-rouge">ListNode removeFromTail()</code> – Remove the last item from the list.</li>
  <li><code class="language-plaintext highlighter-rouge">bool isEmpty()</code> – Check if the list has no elements.</li>
  <li><code class="language-plaintext highlighter-rouge">int find(data)</code> – Find the item in a list and return its position.</li>
</ul>

<p>We can define an interface for this, which looks like follows.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">interface</span> <span class="nc">ILinkedList</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">addToTail</span><span class="p">(</span><span class="kt">int</span> <span class="n">data</span><span class="p">);</span>
    <span class="n">ListNode</span> <span class="nf">removeFromTail</span><span class="p">();</span>
    <span class="kt">bool</span> <span class="nf">IsEmpty</span><span class="p">();</span>
    <span class="kt">int</span> <span class="nf">find</span><span class="p">(</span><span class="kt">int</span> <span class="n">data</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<p>You might have noticed that I have included something that takes the name ListNode here. That is a class that I use to encapsulate the data. Let’s take a quick peak on that first, in order to lessen the confusions.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">ListNode</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Data</span> <span class="p">{</span>
        <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="n">ListNode</span> <span class="n">Next</span> <span class="p">{</span>
        <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="nf">ListNode</span><span class="p">(</span><span class="kt">int</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">Data</span> <span class="p">=</span> <span class="n">data</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">Next</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Take note on the fact that this list node is capable of holding only integer for the time being. We can always extend that with the use of generics.</p>

<p>Now, we can move on to implementing the interface in a concrete class named LinkedList. That will take the shape of the following scaffold.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LinkedList</span> <span class="p">:</span> <span class="n">ILinkedList</span> <span class="p">{</span>
    <span class="k">private</span> <span class="n">ListNode</span> <span class="n">head</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">LinkedList</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">head</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// Other method implementations</span>
<span class="p">}</span>
</code></pre></div></div>

<p>We have the private property head in this implementation. That is the essential component that keeps track of the memory location that the list begins. We initialize it to null and as we add the first element, it will start to point to that instead. Now let’s look at each of the methods to see how they are in action.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">addToTail</span><span class="p">(</span><span class="kt">int</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ListNode</span> <span class="n">node</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">head</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//head == null means the list is empty.</span>
        <span class="k">this</span><span class="p">.</span><span class="n">head</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span> <span class="c1">// List is not empty. Have to find the tail...</span>
        <span class="n">ListNode</span> <span class="n">tmp</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">head</span><span class="p">;</span> <span class="c1">// Use a temporary pointer...</span>
        <span class="k">while</span><span class="p">(</span><span class="n">tmp</span><span class="p">.</span><span class="n">Next</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// ...to find the node that has it's next is null</span>
            <span class="n">tmp</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">.</span><span class="n">Next</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">tmp</span><span class="p">.</span><span class="n">Next</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span> <span class="c1">// Found it. Assign the node as the next of tmp</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here, it flows as follows.</p>

<ol>
  <li>Create a ListNode to encapsulate the data.</li>
  <li>If the current head of the list is null, that means the list has no nodes. So we can set the new node as the head of our list.</li>
  <li>Otherwise, we have to find the tail (the last node) of the list. Tail has a special property that makes it distinct from other nodes. That is, its Next is null.</li>
  <li>To find such, we use a variable tmp that initially refers to the current head of the list.</li>
  <li>Starting from that, we keep on switching the reference of tmp to tmp.Next until tmp refers to the list node that its Next is null. That’s the end/tail of the list.</li>
  <li>Append our new node there.</li>
</ol>

<p>Obviously, this method to add something of the tail is not so efficient. The reason is having to sequentially reach the end every time. Assume a list of 1 million items. Adding to the tail of that? Let’s refactor the code a bit. This time, we keep another pointer like Head, the Tail, that points to the end of the list always.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">LinkedList</span> <span class="p">:</span> <span class="n">ILinkedList</span> <span class="p">{</span>
    <span class="k">private</span> <span class="n">ListNode</span> <span class="n">head</span><span class="p">;</span>
    <span class="k">private</span> <span class="n">ListNode</span> <span class="n">tail</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">LinkedList</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">head</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">tail</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// ...</span>
</code></pre></div></div>

<p>Our new add method will look like follows.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">void</span> <span class="nf">addToTail</span><span class="p">(</span><span class="kt">int</span> <span class="n">data</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ListNode</span> <span class="n">node</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ListNode</span><span class="p">(</span><span class="n">data</span><span class="p">);</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">head</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="c1">//head == null means the list is empty.</span>
        <span class="k">this</span><span class="p">.</span><span class="n">head</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span>
        <span class="k">this</span><span class="p">.</span><span class="n">tail</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span> <span class="c1">//tail will be the last element.</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="p">{</span> <span class="c1">// List is not empty. Have to find the tail, which we already know.</span>
        <span class="k">this</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">Next</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span> <span class="c1">// current tail's Next will be the newnode.</span>
        <span class="k">this</span><span class="p">.</span><span class="n">tail</span> <span class="p">=</span> <span class="n">node</span><span class="p">;</span> <span class="c1">// new tail will be the newly added node.</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here we do a little bit of trade-off of memory, to avoid time complexity. The memory trade-off is insignificant because it’s just a pointer of a few bytes of size. When the list is not empty,</p>

<ul>
  <li>The newly created node will be the next of the current tail.</li>
  <li>After that set, the new node will become the new tail of the list.</li>
</ul>

<p>Next up, is the RemoveFromTail method. The implementation is as follows.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">int</span> <span class="nf">RemoveFromTail</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nf">IsEmpty</span><span class="p">())</span> <span class="p">{</span> <span class="c1">// If the list is already empty...</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">InvalidOperationException</span><span class="p">(</span><span class="s">"List is empty."</span><span class="p">);</span> <span class="c1">// Throw exception</span>
    <span class="p">}</span>
    <span class="kt">int</span> <span class="n">data</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">Data</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="n">head</span><span class="p">.</span><span class="n">Next</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Head is the only element availble. so..</span>
        <span class="k">this</span><span class="p">.</span><span class="n">head</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span> <span class="c1">// reset head and tail and...</span>
        <span class="k">this</span><span class="p">.</span><span class="n">tail</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">data</span><span class="p">;</span> <span class="c1">// Return recently detached data element</span>
    <span class="p">}</span>
    <span class="n">ListNode</span> <span class="n">tmp</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">head</span><span class="p">;</span>
    <span class="c1">// tmp should refer to the node before the tail</span>
    <span class="k">while</span><span class="p">(</span><span class="n">tmp</span><span class="p">.</span><span class="n">Next</span><span class="p">.</span><span class="n">Next</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span> 
        <span class="n">tmp</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">.</span><span class="n">Next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// Removal</span>
    <span class="n">data</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">.</span><span class="n">Next</span><span class="p">.</span><span class="n">Data</span><span class="p">;</span>
    <span class="k">this</span><span class="p">.</span><span class="n">tail</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span> <span class="c1">// New tail should be the one referred by tmp.</span>
    <span class="k">this</span><span class="p">.</span><span class="n">tail</span><span class="p">.</span><span class="n">Next</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span> <span class="c1">// New tail's Next should be null</span>
    <span class="k">return</span> <span class="n">data</span><span class="p">;</span> <span class="c1">// Return recently detached data element</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Here, it has three cases to address which are,</p>

<ol>
  <li>the list is empty. When the list is empty, we will throw an InvalidOperationException.</li>
  <li>the list has only one element. Here, we extract the data, reset the pointers head and tail to their defaults and return data.</li>
  <li>otherwise. Here, we extract the data and set the new tail of the list to the one before the element that is the current tail. Notice the while loop that checks <code class="language-plaintext highlighter-rouge">tmp.Next.Next != null</code>.</li>
</ol>

<p>You can already see that we use the <code class="language-plaintext highlighter-rouge">IsEmpty()</code> method to check the emptiness of the list before we remove from the tail. That method has a very straightforward implementation which is as follows. All it does is checking if the current head of the list is null and returning bool to indicate the state.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsEmpty</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="n">head</span> <span class="p">==</span> <span class="k">null</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Finally, we need to find if we have a given data element in the list. That can be implemented as follows.</p>

<div class="language-c# highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kt">int</span> <span class="nf">Find</span><span class="p">(</span><span class="kt">int</span> <span class="n">needle</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">ListNode</span> <span class="n">tmp</span> <span class="p">=</span> <span class="k">this</span><span class="p">.</span><span class="n">head</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">index</span> <span class="p">=</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span> <span class="c1">// 0 based index of the node being checked.</span>
    <span class="c1">// tmp should refer to the node before the tail</span>
    <span class="k">while</span><span class="p">(</span><span class="n">tmp</span><span class="p">.</span><span class="n">Next</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
        <span class="p">++</span><span class="n">index</span><span class="p">;</span>
        <span class="k">if</span><span class="p">(</span><span class="n">tmp</span><span class="p">.</span><span class="n">Data</span> <span class="p">==</span> <span class="n">needle</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// Check if the needle is the current item's data..</span>
            <span class="k">return</span> <span class="n">index</span><span class="p">;</span> <span class="c1">// found it. Return it...</span>
        <span class="p">}</span>
        <span class="n">tmp</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">.</span><span class="n">Next</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">-</span><span class="m">1</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>The method is intended to look for a data item in the entire list return its index. If not found the index will be -1. Searching is nothing but a simple linear traversal.</p>

<p>That is it for the time being. Given that these are abstract data types (ADTs), you are free to decide the implementations according to your preference and the purpose intended. There are many different optimizations that could be done on this before it is production-ready. For now, this should be enough. The complete implementation that includes some test cases, added in this gist. That’s it folks. Until next time. Happy coding! :)</p>]]></content><author><name></name></author><category term="techbits" /><summary type="html"><![CDATA[A linked list is a data structure that is nothing but a list of elements which are linearly interlinked with the use of references. This post intends to explain the concepts behind linked lists, along with how to implement one, using C#.]]></summary></entry><entry><title type="html">මහ මුදලි කමටත් වඩා ලොකු ලැජ්ජා නැතිකම</title><link href="https://kanchana.senadheera.net/mage_weyikkiya/2020/01/19/shamelessness.html" rel="alternate" type="text/html" title="මහ මුදලි කමටත් වඩා ලොකු ලැජ්ජා නැතිකම" /><published>2020-01-19T10:12:18+00:00</published><updated>2020-01-19T10:12:18+00:00</updated><id>https://kanchana.senadheera.net/mage_weyikkiya/2020/01/19/shamelessness</id><content type="html" xml:base="https://kanchana.senadheera.net/mage_weyikkiya/2020/01/19/shamelessness.html"><![CDATA[<p>මේ ලිපියට පසුබිම් කතාව සපයන්නේ මීට දින දෙකකට පමණ පෙර ඇස ගැටුණු පහත සඳහන් සිරස්තලයයි.</p>

<p align="center">***ගේ සහ ***ගේ ප්‍රකාශ ගැන විමර්ශනයක්…</p>

<p>එම පුවතට අදාල වැඩිදුර විස්තර වලට අනුව මෙම විමර්ශනය දියත් කිරීමට හේතු වශයෙන් සඳහන්ව තිබුණේ, මේ වන විට ගෝලීය වසංගතයක් බවට පත්ව ඇති කොවිඩ්-19 වෛරසය ශ්‍රී ලංකාවේ පැතිර යාම පිළිබඳව මහජනයා තුල අනියත බියක් ඇතිවන අයුරින් මේ මන්ත්‍රීන් දෙදෙනා විසින් <strong><em>ජඩමාධ්‍ය</em></strong> ඉදිරියේ සිදු කරන්නට යෙදුනු ප්‍රසිද්ධ ප්‍රකාශයන් ය. කිසිදු පුදුමයට කාරණාවක් මෙහි නැති වීමද එක් අන්දමකට පුදුම සහගතය. කවර හෙයින්ද යත්, මේ දෙදෙනාම නම ගිය වාචාලයන් වීම නිසාය. මේ දෙදෙනා අතරින් එකෙක් කටේ තොලේ නොගෑවී බේගල් ඇදබෑම පිළිබඳව කුප්‍රකට ඉතිහාසයක් ඇත්තෙක් වීම නිසාය. අන්‍යන්ට අපහාස අවලාද නැගීම පිළිබඳව නම් දැරූවෙක් වීම නිසාය. කොටින්ම කිවහොත්, මේ අතරින් එක් කටක් අපේ ආදරණීය සිරිලක් අම්මාට ශාපයක් බවට පත්ව ඇති නිසාය.</p>

<p>ඒ අප දන්නා හරියය. නමුත් ඒ දන්නා දේවල් ගැන හාරා අවුස්සමින් මෙය කියවන ඔබගේ කාලය කා දමන්නට අවශ්‍ය නැත. මේ ලිපියේ අරමුණ වන්නේ මේ සිද්ධිය හරයා යළිත් වරක් තහවුරු වන, නමුත් ඔබගේ විමර්ශනාක්ෂියට මෙතෙක් හසු නොවූ (හෝ හසු කරගන්නට ඔබට වුවමනාවක් නොතිබූ) කාරණා තුනක් ගැන රටේ පරමාධිපත්‍ය බලධාරී ඡන්දදායක ඔබගේ අවධානය යොමු කරවීමයි. එබැවින් පක්ෂ දේශපාලනයෙන් ඔබේ ඔළුව ඔද්දල් කරවූ පාට කණ්නාඩි ගලවා තබන්නට හැකිනම් පමණක් මේ ලිපිය මෙතැනින් ඉදිරියට කියවන්නටත්, එසේ නොහැකි නම් කරුණාකර වෙනත් වැඩක් බලා ගන්නටත් ඔබට යෝජනා කරනු කැමැත්තෙමි.</p>

<p>මුල්ම කාරණාව වන්නේ මෙම සිද්ධියත්, මෑත කාලීනව සිදුවූ මේ හා සමාන සිද්ධි වලදීත් ජඩමාධ්‍ය වල හැසිරීමය. මා මුලින් සඳහන් කල පරිදී මේ සිද්ධියට අදාල එක් අයෙක් බොරුකාර, වංචාකාර, තක්කඩියෙකි. මේ තක්කඩියා මීට ඉතාම සුළු කාලයකට පෙර කුප්‍රකට මාධ්‍ය සාකච්ඡාවක් නිසා ලෝක ප්‍රසිද්ධියට පත්වූවෙකි. ඒ මාධ්‍ය සාකච්ඡාවේදී සඳහන් කල කාරණා පිළිබඳව සිදු කල විමර්ශන වලින් අනතුරුව ඒවා පදනම් විරහිත පට්ටපල් බොරු කප්පරක් බව තහවුරු විය. දැන් ඒ ගැන චෝදනා ගොනුවී අධිකරණය ඉදිරියේ එම චෝදනා විභාග වෙමින් පවතී. එවන් පසුබිමක මෙබඳු බොරුකාරයන් විසින් කැඳවනු ලබන මාධ්‍ය සාකච්ඡාවලට, වගකිවයුතු යැයි තමන් විසින් හඳුන්වාගන්නා මාධ්‍ය ආයතන හා මාධ්‍යවේදීන් සහභාගී වන්නේ “අහවල් මගුලක”ටදැයි මට වැටහෙන්නේ නැත. මට ඒ ගැන දිය හැකි හොඳම පැහැදිලි කිරීම වන්නේ, “කුණු රසය විකුණා කෑම සඳහා” යන්න පමණකි. අපේ රටේ සාතිශය බහුතරයකට, කරන්නට වැදගැම්මකට ඇති වැඩක් නැති තරම්ය. පාර අයිනේ ඇති කුණු ගොඩවල් අවුස්සමින් කුණු කන කපුටන් මෙන්, අනුන්ගේ කුණු ගඳ ගසන ඕපාදූප හාරා අවුස්සමින් කොතරම් කාලයක් ගතකරන්නේද යන්න සලකා බැලූ විට ඒ ගැන මනාව පැහැදිලි වේ. ෆේස්බුක්, ට්විටර්, යූටියුබ් ආදී සමාජ මාධ්‍ය වලත්, අනේකවිධ “ගොසිප් සයිට්” වලත් ලංකාවෙ උන් පලකරන දෑත්, ඒවාට දමා ඇති “කමෙන්ට්” ආදියත් බැලූ විට ඇතිවන අපුල වචන වලින් පැවසිය නොහැකි තරම් ය. සිංහල භාෂාවේ ඇති නම්‍යශීලී බව ඉතාම දරුණු ලෙස අපහරණය කරමින් පලකරන මේ අමු තිත්ත කුණුහරුප, අන්තර්ජාලය තුල චිරාත් කාලයක් පවතින බවත්, ඒවා පවතින අන්දම ගැනත්, ලංකාවේ සිටින මෝඩයන්ට නොවැටහීම ජාතියේ අවාසනාවකි. ඒවා කියවන අපේ මතු පරපුර, අපේ සොහොන් වලටත් හෙන ඉල්ලනවා නොඅනුමානය. එබඳු විලි ලැජ්ජා නැති, අමන ප්‍රේක්ෂක ශ්‍රාවක පිරිසකට ගැලපෙන්නේ කුණු පමණක් නිසා, මේ වගකිවයුතු ජඩමාධ්‍යකරුවන් කුණු සොයා යනවා විය යුතුය. අද කොළඹ අපරාධ කොට්ඨාශ නිලධාරීන් හට, කිසිදු අවශ්‍යතාවක් නැති විමර්ශනයක් වෙනුවෙන් තම කාලය හා මේ දුප්පත් රටේ සල්ලි කාබාසිනියා කරන්නට සිදුව තිබීමට එකම හේතුව “වගකිවයුතු” මාධ්‍ය භාවිතය වීම රටේ අවාසනාවකි. ඔය කියන මාධ්‍ය සාකච්ඡාවට මාධ්‍යවේදීන් කිසිවෙකු සහභාගී නොවූවනම්, මහජනයා බියපත් වන්නේත්, විමර්ශන කරන්නට සිදුවන්නේත් නැත.</p>

<p>දෙවැන්න, දේශපාලනයට එන්නට දත කන සන්නද්ධ හමුදා නිලධාරීන් පිළිබඳව ය. ඕනෑම කෙනෙකුට සක්‍රීය දේශපාලනයේ නිරත වීමට අයිතියක් ඇති බවට කිසිදු තර්කයක් නැත. නමුත්, පසුගිය කාලය පුරාම අපට දක්නට ලැබුනේ මව්බිම වෙනුවෙන් ලේ හලා, වීරයින් ලෙස සන්නද්ධ හමුදාවලින් විශ්‍රාම ගිය නිලධාරීන් රැසක්, දේශපාලන පොර පිටියට වැටී, සිය ආත්ම ගෞරවය කෙලෙසාගත් අන්දම ය. හමුදා නිල ඇඳුමක් ඇඳි ඕනෑම කෙනෙකුට, තමුන් ඇඳි නිල ඇඳුමෙහි ගෞරවය මරණය දක්වාම රැකීම පිළිබඳව සදාචාරාත්මක වගකීමක් ඇති බව, හමුදා නිල ඇඳුමක් ඇඳි අයෙකු වශයෙන් මම විශ්වාස කරමි. මව්බිම වෙනුවෙන් තම රාජකාරිය ලෙයින් කඳුලින් දහදියෙන් ඉටුකර විශ්‍රාම ගිය පසු, තම දිවියේ ඉතිරි කොටස, රටට හා සමාජයට නැතිනම් අඩුම වශයෙන් තමාගේ ලෝකෝත්තර ජීවිතය යහපත් කරගැනීම වෙනුවෙන් යොදවනවා වෙනුවට, අට වත් පාස් නැති, කුඩු ගංජා එතනෝල්, වංචා දූෂණ, හොර මැර ජඩකම් වලින් සමාජයේ උසස් යැයි සම්මත තැන් වලට, මෝඩයන්ව ගොනාට අන්දමින් පැමිණි ඇමති මන්ත්‍රී පණුවන්ගේ වසුරු වලින් කුණු වී ඕජස් ගලන පාර්ලිමේන්තුවට රිංගන්නට දතකන්නේ ඇයිදැයි මට වැටහෙන්නේ නැත. එසේ කිරීමෙන් පැහැදිලි වන්නේ, එක්කෝ ඔවුන් කියන තරම් ජාතිමාමකයින් නොවන බවය. එසේ නොමැති නම් ඔවුන් ආත්ම ගරුත්වයක් නැති මිනිස් පඹයන් බවය. කරුමයක මහත නම්, රටට සේවය කරන්නට කියා පාර්ලිමේන්තු යාමත් හරියට “කන්‍යාභාවය පරිස්සම් කරගන්නට කියා නිදි වදිනවා” වැනි තත්වයට පත්වෙමින් ඇති බව මේ නිලධාරීන් වටහා නොගැනීමය.</p>

<p>තුන්වැනි කාරණාව නම් “හැමදාම අහලා එපාම වෙච්ච” තැටියක් බඳු, මෙරට පරමාධිපත්‍යබලධාරී ඡන්දදායක ඔබගේ භාවිතය පිළිබඳවය. මෙම ලිපියට වස්තු බීජය සැපයූ මන්ත්‍රී දෙපලත් ඇතුළු සාතිශය බහුතරයක් දේශපාලුවනුත්, ජඩමාධ්‍යත් යන දෙකම මේ සෙල්ලම කරන්නේ ඔබ මෙයාකාර සිද්ධීන් නොදුටු නෑසුනු අන්දමට කටයුතු කරන නිසාය. එය ඔබගේ මොලය ඇතිකම ගැන ප්‍රශ්නයක් නොව, තිබෙන මොලය පාවිච්චි නොකරන කම ගැන ප්‍රශ්නයකි. ඒ හා බැඳුනු ඔබගේ පටු, ආත්මාර්ථකාමී ආකල්ප ගැන ප්‍රශ්නයකි. මේ රටේ ඇති සැබෑ ප්‍රශ්න වන දරිද්‍රතාවය, දිනෙන් දින වලපල්ලට යන ආර්ථිකය හා සමාජය, ජාත්‍යන්තර දේශපාලන බල අරගලය ඔස්සේ සිදුකෙරෙන අධිරජවාදී ආක්‍රමණ ආදී ඒවාට ඔබගේ ඇති ඉතාම දුර්වල සංවේදී බව, මේ දේශපාලුවන්ට ඔබටත් නොදැනී ඔබගේ පොකැට්ටුවට විදින්නට, රට විකුණාගෙන කන්නට පාර කපා දී ඇත. එකී ප්‍රශ්න වලට සංවේදී නොවී, ඔබගේ බඩ වියත පමණක් ගැන කරදර විය යුතු තැනකට ඔබව තල්ලු කොට ඇත්තේ මේ දේශපාලුවන් හා, උන්ගෙන් කටු කන්නට බලා හිඳින ජඩමාධ්‍ය කැනහිලුන්ය. ඒ අතරට, ඔබේ ප්‍රියතම “කුණු රසයෙන් හා මෝඩ ආතල් වලින්” අනූන කෘත්‍රිම ලෝකයක්ද ඔබ නෙත් මානයේ මවා තබන්නට මේ ජඩමාධ්‍ය සමත් වී ඇත. ඒ තිරයෙන් එපිට ඇති තිත්ත ඇත්ත ගැන ඔබ දැනුවත් කරනවා වෙනුවට, ඒ තිරය මත මැවෙන්නේ හඬපට, රියැලිටි, දේශපාලුවන්ගේ කටමැත දෙඩවීම් හා අසික්කිත මඩ ප්‍රහාර, “ෆුල් හින්දුස්ථාන්” හා නින්දට යනවිටත් සාරි අඳින හයිහීල්ස් දාන තරු පහේ පවුල් වල චූල කුටුම්භ යුද්ධ ආදිය අවුරුදු ගණන් වමාරා කන මෙගා ටෙලිනාට්‍ය යනාදියය. මේවා දෙස කට ඇරගෙන වරු ගණන් බලාහිඳින ඔබට සියළු ප්‍රශ්න අමතක වී ඔබව නිර්වින්දන තත්වයට පත් වූ පසු, ඊලඟ පියවර වන්නේ දේශපාලුවන් විසින් ඔබව කොල්ල කා රටත් විකුණා දැමීමත්, ඒ ලාභය ජඩමාධ්‍ය හා බෙදා ගැනීමත්ය. මේ විෂම චක්‍රය බිඳවැටෙන්නේ ඔබට මේ යථාර්ථය වටහා ගැනීමට හැකිවූ දිනකය.</p>]]></content><author><name></name></author><category term="mage_weyikkiya" /><summary type="html"><![CDATA[මේ ලිපියට පසුබිම් කතාව සපයන්නේ මීට දින දෙකකට පමණ පෙර ඇස ගැටුණු පහත සඳහන් සිරස්තලයයි. ***ගේ සහ ***ගේ ...]]></summary></entry></feed>